package com.spring.data.jpa.example.Controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.spring.data.jpa.example.Entity.UserInfo;
import com.spring.data.jpa.example.Form.LoginForm;
import com.spring.data.jpa.example.ServiceImpl.UserInfoServiceImpl;

//@RestController
@RestController
@ResponseBody
@SessionAttributes(names="reqForm")
public class LoginController {

	@Autowired
	private UserInfoServiceImpl userInfoServiceImpl;

	@RequestMapping(value="/login/path")
	public ResponseEntity<LoginModel> login(LoginModel model) {
		HttpHeaders headers = new HttpHeaders();
		headers.add("header", model);
		HttpStatus status = HttpStatus.NOT_FOUND;
		return new ResponseEntity<>("text content", headers, status);
	}

	@RequestMapping(value = "/success")
	public String success(Model model, @ModelAttribute("LoginForm") LoginForm loginForm, RedirectAttributes redirectAttribute) {

		String errorMessage = null;

		UserInfo loginUserInfo = userInfoServiceImpl.login(loginForm.getUserName(), loginForm.getPassword());

		if (loginUserInfo != null) {
			String userName = loginUserInfo.getUserName();
			String password = loginUserInfo.getPassword();
			if (userName.equals(loginForm.getUserName()) && password.equals(loginForm.getPassword())) {
				redirectAttribute.addAttribute("userId", loginUserInfo.getId());
				int userId = loginUserInfo.getId();
				loginForm.setUserId(userId);
				loginForm.setUserName(userName);
				loginForm.setPassword(password);
				setLoginForm(loginForm);
				return "redirect:/mypage";
			}
		}

		errorMessage = "入力情報が正しくありません";
		model.addAttribute("errorMessage", errorMessage);
		return "redirect:/loginError";
	}

	@RequestMapping(value = "/ajax",produces="application/xml", method=RequestMethod.POST)
	public String ajax(HttpServletRequest request, HttpServletResponse response) {

		String val = request.getParameter("parameter1");

		return val;
	}

	@RequestMapping(value="/sample",produces="application/xml",method=RequestMethod.POST)
	public String sample(HttpServletRequest req, HttpServletResponse res) {
		String value = req.getParameter("param");

		return value;
	}

	@ModelAttribute("loginForm")
	public LoginForm setLoginForm(LoginForm loginForm) {
		return loginForm;
	}
}
