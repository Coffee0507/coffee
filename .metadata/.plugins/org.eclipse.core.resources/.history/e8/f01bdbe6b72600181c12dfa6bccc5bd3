package jp.co.lsij.p16590004.e_200.controller;

import java.io.IOException;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jp.co.lsij.p16590004.common.ActionParamConstants;
import jp.co.lsij.p16590004.common.CodeEnum;
import jp.co.lsij.p16590004.common.DBDataSource;
import jp.co.lsij.p16590004.common.Error;
import jp.co.lsij.p16590004.common.ForwardPathConstants;
import jp.co.lsij.p16590004.common.ScopeNameConstants;
import jp.co.lsij.p16590004.common.SystemOptionConstants;
import jp.co.lsij.p16590004.e_200.model.ControllerAction;
import jp.co.lsij.p16590004.e_200.model.ControllerActionHelper;
import jp.co.lsij.p16590004.e_200.model.ExceptionHandler;
import jp.co.lsij.p16590004.e_200.model.PageAction;
import jp.co.lsij.p16590004.e_200.model.SessionManagement;
import jp.co.lsij.p16590004.e_200.model.SortAndSearchAction;
import jp.co.lsij.p16590004.e_200.model.SystemLogAction;
import jp.co.lsij.p16590004.e_200.model.bean.SearchBean;
import jp.co.lsij.p16590004.e_200.model.master.SystemOptionControllerAction;
import jp.co.lsij.p16590004.e_77.model.BeanBuilderType;
import jp.co.lsij.p16590004.e_77.model.FacadeType;
import jp.co.lsij.p16590004.e_77.model.master.beans.PageBean;
import jp.co.lsij.p16590004.e_77.model.master.beans.SortBean;
import jp.co.lsij.p16590004.e_77.model.master.beans.UserBean;

/**
 * Servlet implementation class SystemOptionController
 */
/**
 * システム設定に関するコントローラ
 *
 * @author m-kakuwa
 *
 */
@WebServlet("/SystemOptionController")
public class SystemOptionController extends HttpServlet {
  private static final long serialVersionUID = 1L;



  /**
   * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
   */
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    // response.getWriter().append("Served at: ").append(request.getContextPath());
    /*
     * chromeで起動時にタブを復元させると、doGet()にリクエストが飛ぶ
     */
  }

  /**
   * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
   */
  protected void doPost(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    // doGet(request, response);

    ServletContext app = null;
    DBDataSource dbDataSource = null;
    HttpSession session = null;
    Error error = null;
    String user = "";
    String action = "";
    // フォワード先
    String forwardPath = "";
    // 正常処理・異常処理の識別(getForwardPath()の引数)
    boolean isException = false;

    try {// 前処理
      // Errorインスタンスを生成、リクエストスコープに保存
      error = new Error(false);
      request.setAttribute(ScopeNameConstants.SCOPE_ERROR_CLASS, error);
      // servletcontext取得
      app = getServletContext();
      // DataSource取得
      dbDataSource = (DBDataSource) app.getAttribute(ScopeNameConstants.SCOPE_PG_MAINTAINER);
      // セッションオブジェクト生成
      session = request.getSession(false);
      if (session == null
          || session.getAttribute(ScopeNameConstants.SCOPE_LOGIN_USER_INFO) == null) {
        SessionManagement.sessionTimeoutAction(request, response, dbDataSource, app,
            (session == null) ? true : false, session);
        return;
      }
      // ログインユーザー情報を取得
      UserBean account = (UserBean) session.getAttribute(ScopeNameConstants.SCOPE_LOGIN_USER_INFO);
      user = account.getSecondName() + " " + account.getFirstName();
      // actionパラメータを取得(FilterAll.javaから)
      action = ControllerActionHelper.getActionParmeter(request, dbDataSource, app);

    } catch (Exception e) {
      // エラー発生かの識別
      isException = true;
      // 共通の例外処理
      ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
          "SystemOptionController.doPost:前処理");
    }

    // actionパラメータごとの処理
    if (action.equals(SystemOptionConstants.ACTION_USER_ADD)) {// 新規追加フォーム画面で追加ボタンが押された時の処理
      try {
        ControllerAction.addAction(request, dbDataSource, BeanBuilderType.USER_BEAN_BUILDER,
            FacadeType.USER_FACADE, user, action, app, error);
      } catch (Exception e) {
        // エラー発生かの識別
        isException = true;
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.doPost:ACTION_USER_ADD");

        // 入力値戻す
        Map<String, String[]> userMap = ControllerActionHelper.requestParameterAction(request,
            dbDataSource, CodeEnum.sysLogDebug.ToJSP, app);
        request.setAttribute(SystemOptionConstants.SCOPE_USER_INPUT_VALUE, userMap);
      }

    } else if (action.equals(SystemOptionConstants.ACTION_USER_DEL)) {// 削除ボタンが押された時の処理
      try {
        ControllerAction.deleteAction(request, dbDataSource, FacadeType.USER_FACADE,
            BeanBuilderType.USER_BEAN_BUILDER, user, action, app, error);
      } catch (Exception e) {
        // エラー発生かの識別
        isException = true;
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.doPost:ACTION_USER_DEL");
      }

    } else if (action.equals(SystemOptionConstants.ACTION_USER_CHANGE)) {// ユーザー一覧画面で編集ボタンが押された時の処理
      try {
        ControllerAction.changeAction(request, dbDataSource, FacadeType.USER_FACADE, app);

      } catch (Exception e) {
        // エラー発生かの識別
        isException = true;
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.doPost:ACTION_USER_CHANGE");
      }

    } else if (action.equals(SystemOptionConstants.ACTION_USER_EDIT)) {// 編集フォームで変更ボタンが押された時の処理
      try {
        ControllerAction.editAction(request, dbDataSource, BeanBuilderType.USER_BEAN_BUILDER,
            FacadeType.USER_FACADE, user, action, app, error);
      } catch (Exception e) {
        // エラー発生かの識別
        isException = true;
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.doPost:ACTION_USER_EDIT");

        // 入力値戻す
        Map<String, String[]> userMap = ControllerActionHelper.requestParameterAction(request,
            dbDataSource, CodeEnum.sysLogDebug.ToJSP, app);
        request.setAttribute(SystemOptionConstants.SCOPE_USER_INPUT_VALUE, userMap);
      }

    } else if (action.equals(SystemOptionConstants.ACTION_USER_SORT)) {// ソートボタンが押された時の処理
      // SortBeanをインスタンス生成
      SortBean sortBean = new SortBean();
      // SearchBeanインスタンスを生成
      SearchBean searchBean = new SearchBean();
      try {
        // リクエストパラメータをbeansにセットする
        Map<String, String[]> requestParameterMap = ControllerActionHelper
            .requestParameterAction(request, dbDataSource, CodeEnum.sysLogDebug.FromJSP, app);
        sortBean = SortAndSearchAction.sortBeanBuilder(requestParameterMap, sortBean, dbDataSource);

      } catch (Exception e) {
        // エラー発生かの識別
        isException = true;
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.doPost:ACTION_USER_SORT");

        // ソート条件を戻す
        sortBean = (SortBean) session.getAttribute(SystemOptionConstants.SCOPE_SORT_USER_LIST);
        if (sortBean == null) {
          // デフォルト値を設定
          SortAndSearchAction.setDefault(sortBean, searchBean, CodeEnum.sortAndSearchType.user);
        }

      } finally {
        // セッションスコープに保存
        session.setAttribute(SystemOptionConstants.SCOPE_SORT_USER_LIST, sortBean);
      }

      // 以下はパスワード設定画面からの処理
    } else if (action.equals(SystemOptionConstants.ACTION_PASS_CHANGE)) {// パスワード設定画面で変更ボタンが押された時の処理
      try {
        SystemOptionControllerAction.editPassAction(request, dbDataSource,
            BeanBuilderType.USER_BEAN_BUILDER, user, action, app, error);
      } catch (Exception e) {
        // エラー発生かの識別
        isException = true;
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.doPost:ACTION_PASS_CHANGE");

        // 入力値戻す
        Map<String, String[]> passMap = ControllerActionHelper.requestParameterAction(request,
            dbDataSource, CodeEnum.sysLogDebug.ToJSP, app);
        request.setAttribute(SystemOptionConstants.SCOPE_PASS_INPUT_VALUE, passMap);
      }
    // ---追加：インターノウスここから---
    } else if (action.equals(SystemOptionConstants.ACTION_USER_GROUP_ADD)) {// ユーザーグループ新規追加フォーム画面で追加ボタンが押された時の処理
      try {
        ControllerAction.addAction(request, dbDataSource, BeanBuilderType.USER_GROUP_BEAN_BUILDER,
        		FacadeType.USER_GROUP_FACADE, user, action, app, error);
      } catch (Exception e) {
        // エラー発生かの識別
        isException = true;
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.doPost:ACTION_USER_GROUP_ADD");
      }
    } else if (action.equals(SystemOptionConstants.ACTION_USER_GROUP_DEL)) {// ユーザーグループ設定一覧画面で削除ボタンが押された時の処理
      try {
        ControllerAction.deleteAction(request, dbDataSource, FacadeType.USER_GROUP_FACADE,
            BeanBuilderType.USER_GROUP_BEAN_BUILDER, user, action, app, error);
      } catch (Exception e) {
        // エラー発生かの識別
        isException = true;
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.doPost:ACTION_USER_GROUP_DEL");
      }

    } else if (action.equals(SystemOptionConstants.ACTION_USER_GROUP_CHANGE)) {// ユーザーグループ設定一覧画面で編集ボタンが押された時の処理
      try {
    	  ControllerAction.changeAction(request, dbDataSource, FacadeType.USER_GROUP_FACADE, app);

      } catch (Exception e) {
        // エラー発生かの識別
        isException = true;
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.doPost:ACTION_USER_GROUP_CHANGE");
      }

    } else if (action.equals(SystemOptionConstants.ACTION_USER_GROUP_EDIT)) {// ユーザーグループ編集フォームで変更ボタンが押された時の処理
      try {
        ControllerAction.editAction(request, dbDataSource, BeanBuilderType.USER_GROUP_BEAN_BUILDER,
        		FacadeType.USER_GROUP_FACADE, user, action, app, error);
      } catch (Exception e) {
        // エラー発生かの識別
        isException = true;
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.doPost:ACTION_USER_GROUP_EDIT");

        // 入力値戻す
        Map<String, String[]> userMap = ControllerActionHelper.requestParameterAction(request,
            dbDataSource, CodeEnum.sysLogDebug.ToJSP, app);
        request.setAttribute(SystemOptionConstants.SCOPE_USER_GROUP_INPUT_VALUE, userMap);
      }
    // ---追加：インターノウスここまで---
    }

    // フォワード先を設定
    forwardPath = getForwardPath(action, isException, forwardPath);

    // フォワード先ごとの処理
    forwardHelper(forwardPath, request, dbDataSource, action, error, app, session);

    // セッションスコープに保存したオブジェクトをリクエストスコープに保存しなおす(jspではセッションスコープは使用しないため)
    SessionManagement.sessionToRequest(session, request, dbDataSource, app, error);

    // 設定されたフォワード先にフォワードする
    if (!forwardPath.isEmpty()) {
      RequestDispatcher dispatcher = request.getRequestDispatcher(forwardPath);
      dispatcher.forward(request, response);
    }
  }

  /**
   * フォワード先ごとに処理を行うメソッド
   *
   * @param forwardPath フォワード先
   * @param request リクエスト
   * @param dbDataSource データソース
   * @param action actionパラメータ
   * @param error エラークラス
   * @param app アプリケーションスコープ
   */
  private static void forwardHelper(String forwardPath, HttpServletRequest request,
      DBDataSource dbDataSource, String action, Error error, ServletContext app,
      HttpSession session) {

    // SearchBeanインスタンスを生成
    SearchBean searchBean = new SearchBean();
    // SortBeanをインスタンス生成
    SortBean sortBean = new SortBean();
    // PageBeanインスタンスを生成
    PageBean pageBeanBefore = new PageBean();

    // フォワード先ごとに処理を行う
    if (forwardPath.equals(ForwardPathConstants.FORWARD_USER_LIST)) {// ユーザー一覧
      try {
        // actionパラメータごとに、権限の識別情報をセッションスコープ保存
        if (action.equals(ActionParamConstants.ACTION_SYSTEM_OPTION_USER_ADMIN)
            || action.equals(ActionParamConstants.ACTION_SYSTEM_OPTION_USER_GUEST)) {

          boolean canEdit = false;
          if (action.equals(ActionParamConstants.ACTION_SYSTEM_OPTION_USER_ADMIN)) {// ユーザー一覧：管理者の場合
            canEdit = true;
          }
          session.setAttribute(ScopeNameConstants.SCOPE_CAN_EDIT, canEdit);
          // 開発ログ追加(デバッグ用)
          Object[] canEditArray = {canEdit};
          SystemLogAction.addSystemLog(dbDataSource, "canEdit", canEditArray,
              CodeEnum.sysLogDebug.ToJSP, request, app);
        }

        // ソート情報を取得する
        if (session.getAttribute(SystemOptionConstants.SCOPE_SORT_USER_LIST) != null) {// セッションスコープにソートに関するデータが存在するとき
          sortBean = (SortBean) session.getAttribute(SystemOptionConstants.SCOPE_SORT_USER_LIST);
        } else {// デフォルト値をセットする
          SortAndSearchAction.setDefault(sortBean, searchBean, CodeEnum.sortAndSearchType.user);
          // セッションスコープに保存
          session.setAttribute(SystemOptionConstants.SCOPE_SORT_USER_LIST, sortBean);
        }

        // 開発ログ追加(デバッグ用)
        SystemLogAction.addSystemLog(dbDataSource, sortBean, CodeEnum.sysLogDebug.ToJSP, request,
            app);

        // ページ分割の情報をセットする(データ取得開始位置＝offset、表示上限件数＝limit)
        if (action.equals(SystemOptionConstants.ACTION_USER_LIST_NEXT)
            || action.equals(SystemOptionConstants.ACTION_USER_LIST_PRIVIOUS)) {// 次のページ、前のページがリクエストされた時
          PageAction.pageBeanBuilder(request, app, pageBeanBefore, false);
        } else {// 次のページ、前のページ以外がリクエストされた時
          PageAction.pageBeanBuilder(request, app, pageBeanBefore, true);
        }

        // ユーザー一覧データを取得、リクエストスコープに保存
        ControllerAction.getDataList(request, dbDataSource, FacadeType.USER_FACADE, pageBeanBefore,
            sortBean, searchBean, app);

      } catch (Exception e) {
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.forwardHelper:FORWARD_USER_LIST");
      }

    } else if (forwardPath.equals(ForwardPathConstants.FORWARD_USER_FORM)) {// ユーザー新規追加・編集フォーム画面
      try {
        // フォーム画面の識別情報をリクエストスコープに保存
        ControllerAction.setFormIDToScope(request, action, dbDataSource, app);
      } catch (Exception e) {
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.forwardHelper:FORWARD_USER_FORM");
      }

    // 追加：インターノウス
    // ここから
    } else if (forwardPath.equals(ForwardPathConstants.FORWARD_USER_GROUP_LIST)) {// ユーザーグループ設定一覧
      try {
        // actionパラメータごとに、権限の識別情報をセッションスコープ保存
        if (action.equals(ActionParamConstants.ACTION_SYSTEM_OPTION_USER_GROUP_ADMIN)) {
          boolean canEdit = false;
          if (action.equals(ActionParamConstants.ACTION_SYSTEM_OPTION_USER_GROUP_ADMIN)) {// ユーザーグループ設定一覧：管理者の場合
            canEdit = true;
          }

          session.setAttribute(ScopeNameConstants.SCOPE_CAN_EDIT, canEdit);
          // 開発ログ追加(デバッグ用)
          Object[] canEditArray = {canEdit};
          SystemLogAction.addSystemLog(dbDataSource, "canEdit", canEditArray,
          CodeEnum.sysLogDebug.ToJSP, request, app);
        }

        // ユーザーグループ設定一覧データを取得、リクエストスコープに保存
        ControllerAction.getDataList(request, dbDataSource, FacadeType.USER_GROUP_FACADE, pageBeanBefore,
            sortBean, searchBean, app);

      } catch (Exception e) {
      	// 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.forwardHelper:FORWARD_USER_GROUP_LIST");
      }

    } else if (forwardPath.equals(ForwardPathConstants.FORWARD_USER_GROUP_FORM)) {// ユーザーグループ設定新規追加・編集フォーム画面
      try {
        //ユーザー一覧データを取得、リクエストスコープに保存
        SystemOptionControllerAction.forwardActionToUserGroupForm(request, dbDataSource, action, app);
        // 開発ログ追加(デバッグ用)
        SystemLogAction.addSystemLog(dbDataSource, sortBean, CodeEnum.sysLogDebug.ToJSP, request, app);

      } catch (Exception e) {
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "SystemOptionController.forwardHelper:FORWARD_USER_GROUP_FORM");
      }

    }
    // ここまで
  }


  /**
   * フォワード先のパスを返すメソッド
   *
   * @param action actionパラメータ
   * @param isException 例外処理かどうかの識別
   * @param forwardPath フォワード先
   * @return
   */
  private static String getForwardPath(String action, boolean isException, String forwardPath) {

    // 以下、ユーザー一覧の処理
    // 正常：form 異常：list
    if (action.equals(SystemOptionConstants.ACTION_USER_ADD)
        || action.equals(SystemOptionConstants.ACTION_USER_EDIT)) {
      // フォワード先を設定
      if (isException) {
        forwardPath = ForwardPathConstants.FORWARD_USER_FORM;
      } else {
        forwardPath = ForwardPathConstants.FORWARD_USER_LIST;
      }

      // 正常：list 異常：form
    } else if (action.equals(SystemOptionConstants.ACTION_USER_NEW)
        || action.equals(SystemOptionConstants.ACTION_USER_CHANGE)) {
      // フォワード先を設定
      if (isException) {
        forwardPath = ForwardPathConstants.FORWARD_USER_LIST;
      } else {
        forwardPath = ForwardPathConstants.FORWARD_USER_FORM;
      }

      // 正常・異常：list
    } else if (action.equals(ActionParamConstants.ACTION_SYSTEM_OPTION_USER_ADMIN)
        || action.equals(ActionParamConstants.ACTION_SYSTEM_OPTION_USER_GUEST)
        || action.equals(SystemOptionConstants.ACTION_USER_DEL)
        || action.equals(SystemOptionConstants.ACTION_USER_ADD_RETURN)
        || action.equals(SystemOptionConstants.ACTION_USER_EDIT_RETURN)
        || action.equals(SystemOptionConstants.ACTION_USER_SORT)
        || action.equals(SystemOptionConstants.ACTION_USER_LIST_PRIVIOUS)
        || action.equals(SystemOptionConstants.ACTION_USER_LIST_NEXT)) {
      // フォワード先を設定
      forwardPath = ForwardPathConstants.FORWARD_USER_LIST;

      // 追加：インターノウス
      // ここから
      // 以下、ユーザーグループ設定の処理
      // 正常：form 異常：list
    } else if (action.equals(SystemOptionConstants.ACTION_USER_GROUP_ADD)
        || action.equals(SystemOptionConstants.ACTION_USER_GROUP_EDIT)) {
   	  // フォワード先を設定
      if (isException) {
        forwardPath = ForwardPathConstants.FORWARD_USER_GROUP_FORM;
      } else {
        forwardPath = ForwardPathConstants.FORWARD_USER_GROUP_LIST;
      }

      // 正常：list 異常：form
    } else if (action.equals(SystemOptionConstants.ACTION_USER_GROUP_NEW)
    	  || action.equals(SystemOptionConstants.ACTION_USER_GROUP_CHANGE)) {
      // フォワード先を設定
      if (isException) {
        forwardPath = ForwardPathConstants.FORWARD_USER_GROUP_LIST;
      } else {
        forwardPath = ForwardPathConstants.FORWARD_USER_GROUP_FORM;
      }

      // 正常・異常：list
    } else if (action.equals(ActionParamConstants.ACTION_SYSTEM_OPTION_USER_GROUP_ADMIN)
        || action.equals(SystemOptionConstants.ACTION_USER_GROUP_DEL)
        || action.equals(SystemOptionConstants.ACTION_USER_GROUP_ADD_RETURN)
        || action.equals(SystemOptionConstants.ACTION_USER_GROUP_EDIT_RETURN)) {
        // フォワード先を設定
        forwardPath = ForwardPathConstants.FORWARD_USER_GROUP_LIST;

      // 以下、パスワード設定の処理
      // 正常・異常：form
    } else if (action.equals(ActionParamConstants.ACTION_SYSTEM_OPTION_PASSWORD)
        || action.equals(SystemOptionConstants.ACTION_PASS_CHANGE)) {
        // フォワード先を設定
        forwardPath = ForwardPathConstants.FORWARD_PASS_FORM;
    }
    // ここまで

    return forwardPath;
  }
}

