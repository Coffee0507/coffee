/**
 *
 */
package jp.co.lsij.p16590004.e_77.model.master.dao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import jp.co.lsij.p16590004.common.DBDataSource;
import jp.co.lsij.p16590004.common.DebugPrint;
import jp.co.lsij.p16590004.common.UserGroupTblConstants;
import jp.co.lsij.p16590004.dao.SQLHelper;
import jp.co.lsij.p16590004.dao.StatementHelper;
import jp.co.lsij.p16590004.e_77.model.BeanDataList;
import jp.co.lsij.p16590004.e_77.model.DataListType;
import jp.co.lsij.p16590004.e_77.model.IDataList;
import jp.co.lsij.p16590004.e_77.model.dao.PostgresDAO;
import jp.co.lsij.p16590004.e_77.model.master.beans.UserGroupBean;
import jp.co.lsij.p16590004.exception.ExceptionType;
import jp.co.lsij.p16590004.exception.SubstituteRuntimeException;

/**
 * postgres 用ユーザーグループ DAO
 *
 * ・スレッドセーフでない
 *
 * @version 1.0.0
 * @since 2.0.0
 * @author dai
 *
 */
public class PostgresUserGroupDAO extends PostgresDAO implements IUserGroupDAO {

  /**
   * コンストラクタ
   */
  protected PostgresUserGroupDAO() {
    super();
    // TODO 自動生成されたコンストラクター・スタブ
  }

  /**
   * コンストラクタ
   *
   * @param dbDataSource DB データソースオブジェクト
   */
  public PostgresUserGroupDAO(DBDataSource dbDataSource) {
    super(dbDataSource);
    // TODO 自動生成されたコンストラクター・スタブ
  }

  /**
   * 全レコード検索SQL文を生成
   *
   * @return 全レコード検索 SQL文
   */
  protected String createSQLStringForSelectingAll() {
    String strSQL = UserGroupDAOHelper.createSQLStringForSelectingAll();

    return (strSQL);
  }

  /**
   * ユーザグループデータ全削除SQL文を生成
   *
   * @return ユーザグループデータ全削除SQL文
   */
  protected String createSQLStringForDeletingAll() {
    String strSQL = UserGroupDAOHelper.createSQLStringForDeletingAll();

    return (strSQL);
  }

  /**
   * ユーザグループ数取得SQL文を生成
   *
   * @return ユーザグループ数取得SQL文
   */
  protected String createSQLStringForCountingUserGroup() {
    String strSQL = UserGroupDAOHelper.createSQLStringForCountingUserGroup();

    return (strSQL);
  }

  /**
   * ユーザーグループデータ全削除 PreparedStatement を生成
   *
   * @return PreparedStatement オブジェクト
   */
  protected PreparedStatement createPreparedStatementForDeletingAll() {
    if (false == isConnected()) {
      assert (false);
      throw new IllegalStateException();
    }
    String strSQL = createSQLStringForDeletingAll();

    DebugPrint.println("PostgresUserGroupDAO::createPreparedStatementForDeletingAll()");
    DebugPrint.println("SQL：", strSQL);

    return StatementHelper.createPreparedStatementWithSQL(strSQL, this.connection);
  }

  /**
   * ユーザーグループ数取得 PreparedStatement を生成
   *
   * @return PreparedStatement オブジェクト
   */
  protected PreparedStatement createPreparedStatementForCountingUserGroup() {
    if (false == isConnected()) {
      assert (false);
      throw new IllegalStateException();
    }
    String strSQL = createSQLStringForCountingUserGroup();

    DebugPrint.println("PostgresUserGroupDAO::createPreparedStatementForCountingUserGroup()");
    DebugPrint.println("SQL：", strSQL);

    return StatementHelper.createPreparedStatementWithSQL(strSQL, this.connection);
  }

  /**
   * ユーザーグループ同名数取得 PreparedStatement を生成
   *
   * @param strUserGroupName ユーザーグループ名
   * @return PreparedStatement オブジェクト
   */
  protected PreparedStatement createPreparedStatementForAlreadyExistingUserGroupName(
      String strUserGroupName) {
    if (false == isConnected()) {
      assert (false);
      throw new IllegalStateException();
    }
    return UserGroupDAOHelper
        .createPreparedStatementForAlreadyExistingUserGroupName(this.connection, strUserGroupName);
  }

  /**
   * ユーザーグループ同名数取得 PreparedStatement を生成
   *
   * @param strUserGroupName ユーザーグループ名
   * @param lID 対象外ユーザーグループ ID
   * @return PreparedStatement オブジェクト
   */
  protected PreparedStatement createPreparedStatementForAlreadyExistingUserGroupName(
      String strUserGroupName, long lID) {
    assert (false != UserGroupBean.isValidUserGroupName(strUserGroupName));
    assert (false != UserGroupBean.isValidID(lID));

    if (false == UserGroupBean.isValidUserGroupName(strUserGroupName)) {
      throw new IllegalArgumentException();
    }
    if (false == UserGroupBean.isValidID(lID)) {
      throw new IllegalArgumentException();
    }
    if (false == isConnected()) {
      assert (false);
      throw new IllegalStateException();
    }
    String strSQL = createSQLStringForCountingUserGroup();
    StringBuilder sqlBuilder = new StringBuilder().append(strSQL).append(" WHERE ")
        .append(UserGroupTblConstants.ID_NAME_STRING).append(" != ?").append(" AND ")
        .append(UserGroupTblConstants.USER_GROUP_NAME_STRING).append(" = ?");
    strSQL = sqlBuilder.toString();

    DebugPrint
        .println("PostgresUserGroupDAO::createPreparedStatementForAlreadyExistingUserGroupName()");
    DebugPrint.println("SQL：", strSQL);

    PreparedStatement preparedStatement = null;
    try {
      preparedStatement = this.connection.prepareStatement(strSQL);// SQLException
      preparedStatement.setLong(1, lID);// SQLException
      preparedStatement.setString(2, strUserGroupName);// SQLException
    } catch (SQLException err) {
      assert (false);
      try {
        if (null != preparedStatement) {
          preparedStatement.close();// void close() throws SQLException
        }
      } catch (SQLException err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      try {
        if (null != preparedStatement) {
          preparedStatement.close();// void close() throws SQLException
        }
      } catch (SQLException err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    DebugPrint.println("PreparedStatement SQL：", preparedStatement.toString());

    return preparedStatement;
  }

  /**
   * PreparedStatement を生成
   *
   * @param lID ユーザーグループ ID
   * @return PreparedStatement オブジェクト
   */
  protected PreparedStatement createPreparedStatementForSelecting(long lID) {
    assert (false != UserGroupBean.isValidID(lID));

    if (false == UserGroupBean.isValidID(lID)) {
      throw new IllegalArgumentException();
    }
    if (false == isConnected()) {
      assert (false);
      throw new IllegalStateException();
    }
    String strSQL = createSQLStringForSelectingAll();
    StringBuilder sqlBuilder = new StringBuilder().append(strSQL).append(" WHERE ")
        .append(UserGroupTblConstants.ID_NAME_STRING).append(" = ?");
    strSQL = sqlBuilder.toString();

    DebugPrint.println("PostgresUserGroupDAO::createPreparedStatementForSelecting()");
    DebugPrint.println("SQL：", strSQL);

    PreparedStatement preparedStatement = null;
    try {
      preparedStatement = this.connection.prepareStatement(strSQL);// SQLException
      preparedStatement.setLong(1, lID);// SQLException
    } catch (SQLException err) {
      assert (false);
      try {
        if (null != preparedStatement) {
          preparedStatement.close();// void close() throws SQLException
        }
      } catch (SQLException err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      try {
        if (null != preparedStatement) {
          preparedStatement.close();// void close() throws SQLException
        }
      } catch (SQLException err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    DebugPrint.println("PreparedStatement SQL：", preparedStatement.toString());

    return preparedStatement;
  }

  /**
   * PreparedStatement を生成
   *
   * @param userGroupBean ユーザーグループデータ（ユーザーグループ名、 作成者のみ使用）
   * @return PreparedStatement オブジェクト
   */
  protected PreparedStatement createPreparedStatementForInserting(UserGroupBean userGroupBean) {
    assert (false != userGroupBean.isValidRequiredColumn(true));

    if (false == userGroupBean.isValidRequiredColumn(true)) {
      throw new IllegalArgumentException();
    }
    if (false == isConnected()) {
      assert (false);
      throw new IllegalStateException();
    }

    StringBuilder sqlBuilder = new StringBuilder().append("INSERT INTO ")
        .append(UserGroupTblConstants.USER_GROUP_TBL_NAME_STRING).append(" (")
        .append(UserGroupTblConstants.USER_GROUP_NAME_STRING).append(", ")
        .append(UserGroupTblConstants.PRIORITY_NAME_STRING).append(", ")
        .append(UserGroupTblConstants.CREATED_AT_NAME_STRING).append(", ")
        .append(UserGroupTblConstants.CREATED_BY_NAME_STRING).append(") VALUES (?, ?, now(), ?)");

    sqlBuilder.append(" RETURNING ").append(UserGroupTblConstants.USER_GROUP_TBL_NAME_STRING)
        .append(".").append(UserGroupTblConstants.ID_NAME_STRING);

    String strSQL = sqlBuilder.toString();

    DebugPrint.println("PostgresUserGroupDAO::createPreparedStatementForInserting()");
    DebugPrint.println("SQL：", strSQL);

    int nOffset = 1;
    PreparedStatement preparedStatement = null;
    try {
      preparedStatement = this.connection.prepareStatement(strSQL);// SQLException
      String str =
          (null == userGroupBean.getUserGroupName()) ? "" : userGroupBean.getUserGroupName();
      preparedStatement.setString(nOffset, str);// SQLException
      nOffset++;
      int nValue = 0;
      nValue = (1 > userGroupBean.getPriority()) ? 1 : userGroupBean.getPriority();
      preparedStatement.setInt(nOffset, nValue);// SQLException
      nOffset++;
      str = (null == userGroupBean.getCreatedBy()) ? "" : userGroupBean.getCreatedBy();
      preparedStatement.setString(nOffset, str);// SQLException
    } catch (SQLException err) {
      assert (false);
      try {
        if (null != preparedStatement) {
          preparedStatement.close();// void close() throws SQLException
        }
      } catch (SQLException err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      try {
        if (null != preparedStatement) {
          preparedStatement.close();// void close() throws SQLException
        }
      } catch (SQLException err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    DebugPrint.println("PreparedStatement SQL：", preparedStatement.toString());

    return preparedStatement;
  }

  /**
   * PreparedStatement を生成
   *
   * @param lID 更新するユーザーグループ ID
   * @param userGroupBean ユーザーグループデータ（ 更新者のみ使用）
   * @return PreparedStatement オブジェクト
   */
  protected PreparedStatement createPreparedStatementForUpdating(long lID,
      UserGroupBean userGroupBean) {
    assert (false != userGroupBean.isValidRequiredColumn(false));

    if (false == userGroupBean.isValidRequiredColumn(false)) {
      throw new IllegalArgumentException();
    }
    if (false == isConnected()) {
      assert (false);
      throw new IllegalStateException();
    }
    StringBuilder sqlBuilder = new StringBuilder().append("UPDATE ")
        .append(UserGroupTblConstants.USER_GROUP_TBL_NAME_STRING).append(" SET ")
        // 追加：インターノウス
        .append(UserGroupTblConstants.USER_GROUP_NAME_STRING).append(" = ?, ")
        //.append(UserGroupTblConstants.PRIORITY_NAME_STRING).append(" = ?, ")
        .append(UserGroupTblConstants.CHANGED_AT_NAME_STRING).append(" = now(), ")
        .append(UserGroupTblConstants.CHANGED_BY_NAME_STRING).append(" = ?").append(" WHERE ")
        .append(UserGroupTblConstants.ID_NAME_STRING).append(" = ?");
    String strSQL = sqlBuilder.toString();

    DebugPrint.println("PostgresUserGroupDAO::createPreparedStatementForUpdating()");
    DebugPrint.println("SQL：", strSQL);

    int nOffset = 1;
    PreparedStatement preparedStatement = null;
    try {
      preparedStatement = this.connection.prepareStatement(strSQL);// SQLException
      /*// 追加：インターノウス
      int nValue = 0;
      nValue = (1 > userGroupBean.getPriority()) ? 1 : userGroupBean.getPriority();
      preparedStatement.setInt(nOffset, nValue);// SQLException
      */
      String str = (null == userGroupBean.getUserGroupName()) ? "" : userGroupBean.getUserGroupName();
      preparedStatement.setString(nOffset, str);// SQLException
      nOffset++;
      str = (null == userGroupBean.getChangedBy()) ? "" : userGroupBean.getChangedBy();
      preparedStatement.setString(nOffset, str);// SQLException
      nOffset++;
      preparedStatement.setLong(nOffset, lID);// SQLException
    } catch (SQLException err) {
      assert (false);
      try {
        if (null != preparedStatement) {
          preparedStatement.close();// void close() throws SQLException
        }
      } catch (SQLException err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      try {
        if (null != preparedStatement) {
          preparedStatement.close();// void close() throws SQLException
        }
      } catch (SQLException err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    DebugPrint.println("PreparedStatement SQL：", preparedStatement.toString());

    return preparedStatement;
  }

  /**
   * PreparedStatement を生成
   *
   * @param lID 削除するユーザーグループID
   * @return PreparedStatement オブジェクト
   */
  protected PreparedStatement createPreparedStatementForDeleting(long lID) {
    assert (false != UserGroupBean.isValidID(lID));

    if (false == UserGroupBean.isValidID(lID)) {
      throw new IllegalArgumentException();
    }
    if (false == isConnected()) {
      assert (false);
      throw new IllegalStateException();
    }
    String strSQL = createSQLStringForDeletingAll();
    StringBuilder sqlBuilder = new StringBuilder().append(strSQL).append(" WHERE ")
        .append(UserGroupTblConstants.ID_NAME_STRING).append(" = ?");
    strSQL = sqlBuilder.toString();

    DebugPrint.println("PostgresUserGroupDAO::createPreparedStatementForDeleting()");
    DebugPrint.println("SQL：", strSQL);

    PreparedStatement preparedStatement = null;
    try {
      preparedStatement = this.connection.prepareStatement(strSQL);// SQLException
      preparedStatement.setLong(1, lID);// SQLException
    } catch (SQLException err) {
      assert (false);
      try {
        if (null != preparedStatement) {
          preparedStatement.close();// void close() throws SQLException
        }
      } catch (SQLException err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      try {
        if (null != preparedStatement) {
          preparedStatement.close();// void close() throws SQLException
        }
      } catch (SQLException err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    DebugPrint.println("PreparedStatement SQL：", preparedStatement.toString());

    return preparedStatement;
  }

  /**
   * SQL 文（クエリー）を実行
   *
   * @param preparedStatement
   * @return クエリー結果格納オブジェクト
   */
  protected IDataList executeQuery(PreparedStatement preparedStatement) {
    assert (null != preparedStatement);

    if (null == preparedStatement) {
      throw new IllegalArgumentException();
    }
    if (false == isConnected()) {
      assert (false);
      throw new IllegalStateException();
    }
    ResultSet resultSet = null;
    BeanDataList<UserGroupBean> userGroupList = null;

    userGroupList = new BeanDataList<UserGroupBean>(DataListType.USER_GROUP_DATA_LIST);
    try {
      resultSet = preparedStatement.executeQuery();// SQLException, SQLTimeoutException
      while (resultSet.next()) {
        UserGroupBean userGroupBean = new UserGroupBean();

        userGroupBean.setId(resultSet.getLong(UserGroupTblConstants.ID_NAME_STRING));
        userGroupBean
            .setUserGroupName(resultSet.getString(UserGroupTblConstants.USER_GROUP_NAME_STRING));
        userGroupBean.setPriority(resultSet.getInt(UserGroupTblConstants.PRIORITY_NAME_STRING));
        userGroupBean
            .setCreatedAt(resultSet.getTimestamp(UserGroupTblConstants.CREATED_AT_NAME_STRING));
        userGroupBean
            .setCreatedBy(resultSet.getString(UserGroupTblConstants.CREATED_BY_NAME_STRING));
        if (null != resultSet.getTimestamp(UserGroupTblConstants.CHANGED_AT_NAME_STRING)) {
          userGroupBean
              .setChangedAt(resultSet.getTimestamp(UserGroupTblConstants.CHANGED_AT_NAME_STRING));
        }
        if (null != resultSet.getString(UserGroupTblConstants.CHANGED_BY_NAME_STRING)) {
          userGroupBean
              .setChangedBy(resultSet.getString(UserGroupTblConstants.CHANGED_BY_NAME_STRING));
        }
        userGroupList.add(userGroupBean);
      }
    } catch (SQLException err) {
      assert (false);
      userGroupList = null;
      try {
        if (null != resultSet) {
          resultSet.close();// void close() throws SQLException
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        resultSet = null;
      }
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      userGroupList = null;
      try {
        if (null != resultSet) {
          resultSet.close();// void close() throws SQLException
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        resultSet = null;
      }
      throw err;
    }
    // 例外時と正常時の処理を変えたいので、finally で処理しない
    try {
      if (null != resultSet) {
        resultSet.close();// void close() throws SQLException
      }
    } catch (SQLException err) {
      assert (false);
      userGroupList = null;
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      userGroupList = null;
      throw err;
    } finally {
      resultSet = null;
    }

    return userGroupList;
  }

  /**
   * （INSERT xxx RETURNING id 用）SQL 文（クエリー）を実行
   *
   * @param preparedStatement
   * @return INSERT 時の id
   */
  protected long execute(PreparedStatement preparedStatement) {
    assert (null != preparedStatement);

    if (null == preparedStatement) {
      throw new IllegalArgumentException();
    }
    if (false == isConnected()) {
      assert (false);
      throw new IllegalStateException();
    }
    ResultSet resultSet = null;
    long id = -1;

    try {
      resultSet = preparedStatement.executeQuery();// SQLException, SQLTimeoutException
      while (resultSet.next()) {
        id = resultSet.getLong(1);
      }
    } catch (SQLException err) {
      assert (false);
      try {
        if (null != resultSet) {
          resultSet.close();// void close() throws SQLException
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        resultSet = null;
      }
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      try {
        if (null != resultSet) {
          resultSet.close();// void close() throws SQLException
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        resultSet = null;
      }
      throw err;
    }
    // 例外時と正常時の処理を変えたいので、finally で処理しない
    try {
      if (null != resultSet) {
        resultSet.close();// void close() throws SQLException
      }
    } catch (SQLException err) {
      assert (false);
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      throw err;
    } finally {
      resultSet = null;
    }

    return id;
  }

  /**
   * SQL 文（クエリー）を実行
   *
   * @param preparedStatement
   * @return クエリー結果行数
   */
  protected long executeQueryForCount(PreparedStatement preparedStatement) {
    long lCount = StatementHelper.executeQueryForCount(preparedStatement,
        UserGroupTblConstants.COUNT_COLUMN_NAME_STRING);
    return (lCount);
  }

  /**
   * SQL 文を実行
   *
   * @param preparedStatement preparedStatement オブジェクト
   * @return (1) SQL データ操作言語 (DML) 文の場合は行数、(2) 何も返さない SQL 文の場合は 0
   */
  protected int executeUpdate(PreparedStatement preparedStatement) {
    int nLine = StatementHelper.executeUpdate(preparedStatement);
    return nLine;
  }


  /*
   * (非 Javadoc)
   *
   * @see
   * jp.co.lsij.p16590004.e_77.model.master.dao.IUserGroupDAO#isAlreadyExistUserGroupName(java.lang.
   * String)
   */
  @Override
  public boolean isAlreadyExistUserGroupName(String strUserGroupName) {
    // TODO 自動生成されたメソッド・スタブ
    PreparedStatement preparedStatement =
        createPreparedStatementForAlreadyExistingUserGroupName(strUserGroupName);
    long lCount = 0;
    try {
      lCount = executeQueryForCount(preparedStatement);
    } catch (Exception err) {
      try {
        if (null != preparedStatement) {
          preparedStatement.close();
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    try {
      if (null != preparedStatement) {
        preparedStatement.close();// SQLException
      }
    } catch (SQLException err) {
      assert (false);
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      throw err;
    } finally {
      preparedStatement = null;
    }
    if (0 >= lCount) {
      return false;
    }

    return true;
  }

  /*
   * (非 Javadoc)
   *
   * @see
   * jp.co.lsij.p16590004.e_77.model.master.dao.IUserGroupDAO#isAlreadyExistUserGroupName(java.lang.
   * String, long)
   */
  @Override
  public boolean isAlreadyExistUserGroupName(String strUserGroupName, long lID) {
    // TODO 自動生成されたメソッド・スタブ
    PreparedStatement preparedStatement =
        createPreparedStatementForAlreadyExistingUserGroupName(strUserGroupName, lID);
    long lCount = 0;
    try {
      lCount = executeQueryForCount(preparedStatement);
    } catch (Exception err) {
      try {
        if (null != preparedStatement) {
          preparedStatement.close();
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    try {
      if (null != preparedStatement) {
        preparedStatement.close();// SQLException
      }
    } catch (SQLException err) {
      assert (false);
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      throw err;
    } finally {
      preparedStatement = null;
    }
    if (0 >= lCount) {
      return false;
    }

    return true;
  }

  /*
   * (非 Javadoc)
   *
   * @see jp.co.lsij.p16590004.e_77.model.master.dao.IUserGroupDAO#select()
   */
  @Override
  public IDataList select() {
    // TODO 自動生成されたメソッド・スタブ
    String strSQL = createSQLStringForSelectingAll();
    // strSQL = addOrderByStringToSQLString(strSQL, false);// 降順
    // #if 1//new 一意にする
    String[] columns = new String[2];
    columns[0] = UserGroupTblConstants.PRIORITY_NAME_STRING;
    columns[1] = UserGroupTblConstants.ID_NAME_STRING;
    // #else//org
    // String[] columns = new String[1];
    // columns[0] = ProjNumTblConstants.PROJ_NUM_NAME_STRING;
    // #endif
    // columns[0] = ProjNumTblConstants.ID_NAME_STRING;
    strSQL = SQLHelper.addOrderByStringToSQLString(strSQL, columns, true);

    DebugPrint.println("PostgresUserGroupDAO::select()");
    DebugPrint.println("SQL：", strSQL);

    PreparedStatement preparedStatement = createPreparedStatementWithSQL(strSQL);
    IDataList iDataList = null;
    try {
      iDataList = executeQuery(preparedStatement);
    } catch (Exception err) {
      try {
        if (null != preparedStatement) {
          preparedStatement.close();
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    try {
      if (null != preparedStatement) {
        preparedStatement.close();// SQLException
      }
    } catch (SQLException err) {
      assert (false);
      iDataList = null;
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      iDataList = null;
      throw err;
    } finally {
      preparedStatement = null;
    }

    return iDataList;
  }

  /*
   * (非 Javadoc)
   *
   * @see jp.co.lsij.p16590004.e_77.model.master.dao.IUserGroupDAO#select(long)
   */
  @Override
  public IDataList select(long lID) {
    // TODO 自動生成されたメソッド・スタブ
    PreparedStatement preparedStatement = createPreparedStatementForSelecting(lID);
    IDataList iDataList = null;
    try {
      iDataList = executeQuery(preparedStatement);
    } catch (Exception err) {
      try {
        if (null != preparedStatement) {
          preparedStatement.close();
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    try {
      if (null != preparedStatement) {
        preparedStatement.close();// SQLException
      }
    } catch (SQLException err) {
      assert (false);
      iDataList = null;
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      iDataList = null;
      throw err;
    } finally {
      preparedStatement = null;
    }

    return iDataList;
  }

  /*
   * (非 Javadoc)
   *
   * @see jp.co.lsij.p16590004.e_77.model.master.dao.IUserGroupDAO#select(java.lang.String)
   */
  @Override
  public IDataList select(String strSQL) {
    // TODO 自動生成されたメソッド・スタブ
    DebugPrint.println("PostgresUserGroupDAO::select()");
    DebugPrint.println("SQL：", strSQL);

    PreparedStatement preparedStatement = createPreparedStatementWithSQL(strSQL);
    IDataList iDataList = null;
    try {
      iDataList = executeQuery(preparedStatement);
    } catch (Exception err) {
      try {
        if (null != preparedStatement) {
          preparedStatement.close();
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    try {
      if (null != preparedStatement) {
        preparedStatement.close();// SQLException
      }
    } catch (SQLException err) {
      assert (false);
      iDataList = null;
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      iDataList = null;
      throw err;
    } finally {
      preparedStatement = null;
    }

    return iDataList;
  }

  /*
   * (非 Javadoc)
   *
   * @see
   * jp.co.lsij.p16590004.e_77.model.master.dao.IUserGroupDAO#insert(jp.co.lsij.p16590004.e_77.model
   * .master.beans.UserGroupBean)
   */
  @Override
  public int insert(UserGroupBean userGroupBean) {
    // TODO 自動生成されたメソッド・スタブ
    PreparedStatement preparedStatement = createPreparedStatementForInserting(userGroupBean);
    int nLine = -1;
    try {
      // nLine = executeUpdate(preparedStatement);
      userGroupBean.setId(execute(preparedStatement));
      nLine = 0;
    } catch (Exception err) {
      try {
        if (null != preparedStatement) {
          preparedStatement.close();
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    try {
      if (null != preparedStatement) {
        preparedStatement.close();// SQLException
      }
    } catch (SQLException err) {
      assert (false);
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      throw err;
    } finally {
      preparedStatement = null;
    }

    return nLine;
  }

  /*
   * (非 Javadoc)
   *
   * @see jp.co.lsij.p16590004.e_77.model.master.dao.IUserGroupDAO#update(long,
   * jp.co.lsij.p16590004.e_77.model.master.beans.UserGroupBean)
   */
  @Override
  public int update(long lID, UserGroupBean userGroupBean) {
    // TODO 自動生成されたメソッド・スタブ
    PreparedStatement preparedStatement = createPreparedStatementForUpdating(lID, userGroupBean);
    int nLine = -1;
    try {
      nLine = executeUpdate(preparedStatement);
    } catch (Exception err) {
      try {
        if (null != preparedStatement) {
          preparedStatement.close();
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    try {
      if (null != preparedStatement) {
        preparedStatement.close();// SQLException
      }
    } catch (SQLException err) {
      assert (false);
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      throw err;
    } finally {
      preparedStatement = null;
    }

    return nLine;
  }

  /*
   * (非 Javadoc)
   *
   * @see jp.co.lsij.p16590004.e_77.model.master.dao.IUserGroupDAO#delete(long)
   */
  @Override
  public int delete(long lID) {
    // TODO 自動生成されたメソッド・スタブ
    PreparedStatement preparedStatement = createPreparedStatementForDeleting(lID);
    int nLine = -1;
    try {
      nLine = executeUpdate(preparedStatement);
    } catch (Exception err) {
      try {
        if (null != preparedStatement) {
          preparedStatement.close();
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    try {
      if (null != preparedStatement) {
        preparedStatement.close();// SQLException
      }
    } catch (SQLException err) {
      assert (false);
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      throw err;
    } finally {
      preparedStatement = null;
    }

    return nLine;
  }

  /*
   * (非 Javadoc)
   *
   * @see jp.co.lsij.p16590004.e_77.model.master.dao.IUserGroupDAO#deleteAll()
   */
  @Override
  public int deleteAll() {
    // TODO 自動生成されたメソッド・スタブ
    PreparedStatement preparedStatement = createPreparedStatementForDeletingAll();
    int nline = -1;
    try {
      nline = executeUpdate(preparedStatement);
    } catch (Exception err) {
      try {
        if (null != preparedStatement) {
          preparedStatement.close();
        }
      } catch (Exception err_2) {
        assert (false);
      } finally {
        preparedStatement = null;
      }
      throw err;
    }
    try {
      if (null != preparedStatement) {
        preparedStatement.close();// SQLException
      }
    } catch (SQLException err) {
      assert (false);
      throw new SubstituteRuntimeException(ExceptionType.SQL, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      throw err;
    } finally {
      preparedStatement = null;
    }

    return nline;
  }

}
