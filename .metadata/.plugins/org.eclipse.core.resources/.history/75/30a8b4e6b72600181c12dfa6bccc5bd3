package jp.co.lsij.p16590004.e_200.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import jp.co.lsij.p16590004.common.CodeEnum;
import jp.co.lsij.p16590004.common.DBDataSource;
import jp.co.lsij.p16590004.common.JSPParamConstants;
import jp.co.lsij.p16590004.common.LogConstants;
import jp.co.lsij.p16590004.common.SystemOptionConstants;
import jp.co.lsij.p16590004.e_200.model.bean.SearchBean;
import jp.co.lsij.p16590004.e_200.model.bean.SearchConditionForDB;
import jp.co.lsij.p16590004.e_77.model.FacadeType;
import jp.co.lsij.p16590004.e_77.model.SearchCondition;
import jp.co.lsij.p16590004.e_77.model.master.beans.SortBean;
import jp.co.lsij.p16590004.e_77.util.SearchLogConditionHelper;
import jp.co.lsij.p16590004.e_77.util.SortLogBeanHelper;
import jp.co.lsij.p16590004.e_77.util.SortUserBeanHelper;
import jp.co.lsij.p16590004.exception.PASMErrorType;
import jp.co.lsij.p16590004.exception.PASMException;

/**
 * ソート・検索機能に関わるメソッドをまとめたクラス
 *
 * @author m-kakuwa
 *
 */
public class SortAndSearchAction {
  /** デフォルト値 操作ログ：検索条件 */
  private static final String DEFAULT_SEARCH_CATEGORY_LOG = LogConstants.JSP_SEARCH_DATE;// 日時
  /** デフォルト値 操作ログ：ソート条件 */
  private static final String DEFAULT_SORT_CATEGORY_LOG = LogConstants.JSP_SORT_CATEGORY_DATE;// 日時
  /** デフォルト値 ユーザー一覧：ソート条件 */
  private static final String DEFAULT_SORT_CATEGORY_USER =
      SystemOptionConstants.JSP_SORT_CATEGORY_EMP_NUM; // 社員番号



  /**
   * SortBean(ソート条件をセットするbeans)を生成するメソッド
   *
   * @param requestParameterMap
   * @param sortBean
   * @param dbDataSource
   * @return
   */
  public static SortBean sortBeanBuilder(Map<String, String[]> requestParameterMap,
      SortBean sortBean, DBDataSource dbDataSource) {

    String sortCategory = requestParameterMap.get(JSPParamConstants.SORT_CATEGORY)[0];// ソート項目
    String sortOrder = requestParameterMap.get(JSPParamConstants.SORT_ORDER)[0];// 並び順

    // 取得した値をbeansにセットする
    if (!sortOrder.equals(JSPParamConstants.SORT_ORDER_ASC)) {// 並び順
      sortBean.setAsc(false);
    } else {
      sortBean.setAsc(true);
    }
    sortBean.setColumnName(sortCategory);// ソート項目

    return sortBean;
  }

  /**
   * SearchBean(検索条件をセットするbeans)を生成するメソッド
   *
   * @param requestParameterMap
   * @param num
   * @param sortAndSearchType
   * @param dbDataSource
   * @return
   * @throws PASMException
   */
  public static SearchBean[] searchBeanBuilder(Map<String, String[]> requestParameterMap, int num,
      CodeEnum.sortAndSearchType sortAndSearchType, DBDataSource dbDataSource)
      throws PASMException {

    // リクエストパラメータを取得
    List<SearchBean> searchBeanList = new ArrayList<SearchBean>();
    for (int i = 1; i <= num; i++) {
      // 検索条件を取得
      String searchCategory = (requestParameterMap.get(JSPParamConstants.SEARCH_CATEGORY + i))[0];
      String searchWord = (requestParameterMap.get(JSPParamConstants.SEARCH_WORD + i))[0];

      if (sortAndSearchType != CodeEnum.sortAndSearchType.proj) {// P番一覧以外の画面の時の処理・・・未入力の場合、例外を投げる
        if (searchWord == null || searchWord.isEmpty()) {
          throw new PASMException(PASMErrorType.INVALID, "検索条件を入力してください");
        }
      }
      // beanにセット
      SearchBean searchBean = new SearchBean();
      searchBean.setSearchCategory(searchCategory);
      searchBean.setSearchWord(searchWord);

      // リストに追加
      searchBeanList.add(searchBean);
    }
    // 配列に変換
    SearchBean[] searchBeanArray = (SearchBean[]) searchBeanList.toArray(new SearchBean[0]);

    return searchBeanArray;
  }

  /**
   * デフォルト値をセットするメソッド
   *
   * @param sortBean
   * @param searchBean
   * @param sortAndSearchType
   */
  public static void setDefault(SortBean sortBean, SearchBean searchBean,
      CodeEnum.sortAndSearchType sortAndSearchType) {

    switch (sortAndSearchType) {
      case log:
        // 今日の日付を取得
        String dateToday = DateAction.getStrDateToday();
        // デフォルト値をセットする
        sortBean.setColumnName(DEFAULT_SORT_CATEGORY_LOG);// ソート：日時
        sortBean.setAsc(false);// ソート：降順
        searchBean.setSearchCategory(DEFAULT_SEARCH_CATEGORY_LOG);// 検索条件：日時
        searchBean.setSearchWord(dateToday);// 検索ワード：今日の日付
        break;

      case user:
        sortBean.setAsc(true);
        sortBean.setColumnName(DEFAULT_SORT_CATEGORY_USER);
        break;
    }
  }

  /**
   * SortBean,SearchBeanをDBアクセスに適したデータに加工するメソッド
   *
   * @param sortBean
   * @param searchBean
   * @param facadeType
   * @param dbDataSource
   * @return
   */
  public static SearchConditionForDB beanToBeanArray(SortBean sortBean, SearchBean searchBean,
      FacadeType facadeType, DBDataSource dbDataSource) {

    SearchConditionForDB sortAndSearch = new SearchConditionForDB();
    SortBean[] sortBeanArray = null;// ソート情報
    SearchCondition[] searchCondition = null;// 検索情報

    switch (facadeType) {
      case USER_FACADE:// ユーザー一覧：ソートのみ
        sortBeanArray = SortUserBeanHelper.createSortBeanForUserList(sortBean.isAsc(),
            sortBean.getColumnName());
        break;

      case LOG_FACADE:// 操作ログ：ソート・検索両方
        // ソート
        sortBeanArray =
            SortLogBeanHelper.createSortBeanForUserList(sortBean.isAsc(), sortBean.getColumnName());
        // 検索
        searchCondition = SearchLogConditionHelper.createSearchConditionForLogList(
            searchBean.getSearchCategory(), searchBean.getSearchWord());
        break;
    }

    sortAndSearch.setSortBeanArray(sortBeanArray);
    sortAndSearch.setSearchCondition(searchCondition);

    return sortAndSearch;
  }


  /**
   * SortBeanの配列をつくるメソッド
   *
   * @param isAsc 昇順かどうか
   * @param category 何でソートをかけるか
   * @return SortBean[]
   */
  public static SortBean[] createSortBeanArray(boolean isAsc, String category) {

    SortBean sortBean = new SortBean();
    sortBean.setAsc(isAsc);
    sortBean.setColumnName(category);

    SortBean[] sortBeanArray = {sortBean};

    return sortBeanArray;
  }
}
