package jp.co.lsij.p16590004.e_200.controller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jp.co.lsij.p16590004.common.CodeEnum;
import jp.co.lsij.p16590004.common.DBDataSource;
import jp.co.lsij.p16590004.common.Error;
import jp.co.lsij.p16590004.common.ForwardPathConstants;
import jp.co.lsij.p16590004.common.PurchaseConstants;
import jp.co.lsij.p16590004.common.ScopeNameConstants;
import jp.co.lsij.p16590004.e_200.model.ControllerActionHelper;
import jp.co.lsij.p16590004.e_200.model.ExceptionHandler;
import jp.co.lsij.p16590004.e_200.model.SessionManagement;
import jp.co.lsij.p16590004.e_200.model.purchase.PurchaseControllerAction;
import jp.co.lsij.p16590004.e_77.model.master.beans.UserBean;

/**
 * Servlet implementation class PurchaseController
 */
// 追加：インターノウス
// ここから
@WebServlet("/PurchaseController")
public class PurchaseController extends HttpServlet {
  private static final long serialVersionUID = 1L;

  public PurchaseController() {
      super();
      // TODO Auto-generated constructor stub
  }

  /**
   * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
   */
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
  }

  /**
   * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
   */
  protected void doPost(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {

    ServletContext app = null;
    DBDataSource dbDataSource = null;
    HttpSession session = null;
    Error error = null;;
    String user = "";
    String action = "";
    // 正常処理・異常処理の識別(getForwardPath()の引数)
    boolean isException = false;

    try {// 前処理
      // Errorインスタンスを生成、リクエストスコープに保存
      error = new Error(false);
      request.setAttribute(ScopeNameConstants.SCOPE_ERROR_CLASS, error);
      // servletcontext取得
      app = getServletContext();
      // DataSource取得
      dbDataSource = (DBDataSource) app.getAttribute(ScopeNameConstants.SCOPE_PG_MAINTAINER);
      // セッションオブジェクト生成
      session = request.getSession(false);
      if (session == null
          || session.getAttribute(ScopeNameConstants.SCOPE_LOGIN_USER_INFO) == null) {
        SessionManagement.sessionTimeoutAction(request, response, dbDataSource, app,
            (session == null) ? true : false, session);
        return;
      }
      // ログインユーザー情報を取得
      UserBean account = (UserBean) session.getAttribute(ScopeNameConstants.SCOPE_LOGIN_USER_INFO);
      user = account.getSecondName() + " " + account.getFirstName();
      // actionパラメータを取得(FilterAll.javaから)
      action = ControllerActionHelper.getActionParmeter(request, dbDataSource, app);

    } catch (Exception e) {
      // エラー発生かの識別
      isException = true;
      // 共通の例外処理
      ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
          "PurchaseController.doPost:前処理");
    }

    // フォワード先
    String forwardPath = "";

    // フォワード先を設定
    forwardPath = getForwardPath(action, isException,  forwardPath);

    // フォワード先ごとの処理
    forwardHelper(forwardPath, request, response, dbDataSource, error, app, action, user);

    // セッションスコープに保存したオブジェクトをリクエストスコープに保存しなおす(jspではセッションスコープは使用しないため)
    SessionManagement.sessionToRequest(session, request, dbDataSource, app, error);

    // 設定されたフォワード先にフォワードする
    if (!forwardPath.isEmpty()) {
      RequestDispatcher dispatcher = request.getRequestDispatcher(forwardPath);
      dispatcher.forward(request, response);
    }
  }

  private static String getForwardPath(String action, boolean isException, String forwardPath) {
    // actionパラメータごとにフォワード先を変える

    // 正常・異常ともに仕入れデータ画面
    if (action.equals(PurchaseConstants.ACTION_PURCHASE_IMPORT_START)) {
    	forwardPath = ForwardPathConstants.FORWARD_PROJ_PURCHASE_IMPORT;
    } else {
    	forwardPath = ForwardPathConstants.FORWARD_PROJ_PURCHASE_IMPORT;
    }

    return forwardPath;
  }

  /**
   * フォワード先ごとに処理を行うメソッド
   *
   * @param forwardPath フォワード先
   * @param request リクエスト
   * @param dbDataSource データソース
   * @param action actionパラメータ
   * @param error エラークラス
   */
  private static void forwardHelper(String forwardPath, HttpServletRequest request,
      HttpServletResponse response, DBDataSource dbDataSource, Error error, ServletContext app,
      String action, String user) {

    if (action.equals(PurchaseConstants.ACTION_PURCHASE_IMPORT_START)) {// 仕入れインポート
      try {
        // インポート処理
        PurchaseControllerAction.projNumBeanBuilder(request, user, CodeEnum.Form.other, action,
            dbDataSource, app, error);
      } catch (Exception e) {
        // 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, e, error, dbDataSource,
            "PurchaseController.doPost:ACTION_PURCHASE_IMPORT_START");

        // エラー行表示等の例外処理はPurchaseControllerAction.importActionにて行う
      }
    }
  }
}
// ここまで
