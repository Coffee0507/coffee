package jp.co.lsij.p16590004.e_200.model;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import jp.co.lsij.p16590004.common.ActionParamConstants;
import jp.co.lsij.p16590004.common.CodeEnum;
import jp.co.lsij.p16590004.common.DBDataSource;
import jp.co.lsij.p16590004.common.Error;
import jp.co.lsij.p16590004.common.ProjConstants;
import jp.co.lsij.p16590004.common.SystemOptionConstants;
import jp.co.lsij.p16590004.common.UWConstants;
import jp.co.lsij.p16590004.common.UWOptionConstants;
import jp.co.lsij.p16590004.e_200.controller.LogController;
import jp.co.lsij.p16590004.e_77.model.BeanBuilderType;
import jp.co.lsij.p16590004.e_77.model.BeanDataList;
import jp.co.lsij.p16590004.e_77.model.FacadeFactory;
import jp.co.lsij.p16590004.e_77.model.FacadeType;
import jp.co.lsij.p16590004.e_77.model.IData;
import jp.co.lsij.p16590004.e_77.model.IDataList;
import jp.co.lsij.p16590004.e_77.model.IFacade;
import jp.co.lsij.p16590004.e_77.model.SearchCondition;
import jp.co.lsij.p16590004.e_77.model.master.beans.CategoryBean;
import jp.co.lsij.p16590004.e_77.model.master.beans.CustomerBean;
import jp.co.lsij.p16590004.e_77.model.master.beans.LogBean;
import jp.co.lsij.p16590004.e_77.model.master.beans.PageBean;
import jp.co.lsij.p16590004.e_77.model.master.beans.SalesStaffBean;
import jp.co.lsij.p16590004.e_77.model.master.beans.SalesStatusBean;
import jp.co.lsij.p16590004.e_77.model.master.beans.SortBean;
import jp.co.lsij.p16590004.e_77.model.master.beans.UserBean;
import jp.co.lsij.p16590004.e_77.model.master.beans.UserGroupBean;
import jp.co.lsij.p16590004.e_77.model.p_num.beans.AttachFileBean;
import jp.co.lsij.p16590004.e_77.model.p_num.beans.ProjNumBean;
import jp.co.lsij.p16590004.e_77.model.sales.SalesFacade;
import jp.co.lsij.p16590004.e_77.model.sales.beans.SalesBean;

/**
 * ControllerActionが使用するメソッドをまとめたクラス
 *
 * @author m-kakuwa
 *
 */
public class ControllerActionHelper {



  /**
   * FacadeTypeごとにデータ一覧を取得する処理を実行するメソッド
   *
   * @param dbDataSource
   * @param facadeType
   * @param iDataList
   * @param pageBeanBefore
   * @param pageBeanAfter
   * @param sortBeanArray
   * @param searchCondition
   * @param request
   * @return
   */
  public static IDataList getIDataList(DBDataSource dbDataSource, FacadeType facadeType,
      IDataList iDataList, PageBean pageBeanBefore, PageBean pageBeanAfter,
      SortBean[] sortBeanArray, SearchCondition[] searchCondition, HttpServletRequest request,
      ServletContext app) {

    // 開発ログ(デバッグ用)
    SystemLogAction.addSystemLog(dbDataSource, pageBeanBefore, CodeEnum.sysLogDebug.ToLogic,
        request, app);
    if (sortBeanArray != null) {
      SystemLogAction.addSystemLog(Arrays.asList(sortBeanArray), CodeEnum.sysLogDebug.ToLogic,
          dbDataSource, request, app);
    }
    if (searchCondition != null) {
      SystemLogAction.addSystemLog(Arrays.asList(searchCondition), CodeEnum.sysLogDebug.ToLogic,
          dbDataSource, request, app);
    }

    // 以下でデータ一覧を取得するためのFacadeを取得し、処理を実行する
    IFacade iFacade = FacadeFactory.create(facadeType);

    switch (facadeType) {
      case CUSTOMER_FACADE:// ページ分割あり、ソート・検索なしの画面の処理
        iDataList = iFacade.query(dbDataSource, pageBeanAfter, pageBeanBefore);
        break;

      case USER_FACADE:// ページ分割・ソートあり、検索なしの画面の処理
        iDataList = iFacade.query(dbDataSource, pageBeanAfter, pageBeanBefore, sortBeanArray);
        break;

      case LOG_FACADE:// ページ分割・ソート・検索ありの画面の処理
      case PROJ_NUM_FACADE:
        iDataList = iFacade.query(dbDataSource, pageBeanAfter, pageBeanBefore, sortBeanArray,
            searchCondition);
        break;

      case SALES_FACADE:// 売りwin
        if (searchCondition.length == 0) {// 検索条件がソートのみの時
          iDataList = iFacade.query(dbDataSource, pageBeanAfter, pageBeanBefore, sortBeanArray);
        } else {
          iDataList = iFacade.query(dbDataSource, pageBeanAfter, pageBeanBefore, sortBeanArray,
              searchCondition);
        }
        break;

      default:// ページ分割・ソート・検索なしの画面の処理
        iDataList = iFacade.query(dbDataSource);
        break;
    }
    return iDataList;
  }

  /**
   * FacadeTypeごとにIDataListをキャストするメソッド
   *
   * @param request
   * @param facadeType
   * @param iDataList
   * @param dbDataSource
   */
  public static void castIDataList(HttpServletRequest request, FacadeType facadeType,
      IDataList iDataList, DBDataSource dbDataSource, ServletContext app) {
    switch (facadeType) {
      case CATEGORY_FACADE:// 分類一覧
        List<CategoryBean> categoryList = ((BeanDataList<CategoryBean>) iDataList).clone();
        request.setAttribute(UWOptionConstants.SCOPE_CATEGORY_LIST, categoryList);
        break;

      case CUSTOMER_FACADE:// 顧客一覧
        List<CustomerBean> customerList = ((BeanDataList<CustomerBean>) iDataList).clone();
        request.setAttribute(UWOptionConstants.SCOPE_CUSTOMER_LIST, customerList);
        break;

      case SALES_STAFF_FACADE:// 営業担当一覧
        List<SalesStaffBean> salesStaffList = ((BeanDataList<SalesStaffBean>) iDataList).clone();
        request.setAttribute(UWOptionConstants.SCOPE_SALES_STAFF_LIST, salesStaffList);
        break;

      case SALES_STATUS_FACADE:// ステータス一覧
        List<SalesStatusBean> salesStatusList = ((BeanDataList<SalesStatusBean>) iDataList).clone();
        request.setAttribute(UWOptionConstants.SCOPE_SALES_STATUS_LIST, salesStatusList);
        break;

      case USER_FACADE:// ユーザー一覧
        List<UserBean> userList = ((BeanDataList<UserBean>) iDataList).clone();
        request.setAttribute(SystemOptionConstants.SCOPE_USER_LIST, userList);
        break;

      // 追加：インターノウス
      // ここから
      case USER_GROUP_FACADE:// ユーザーグループ設定
        List<UserGroupBean> userGroupList = ((BeanDataList<UserGroupBean>) iDataList).clone();
        request.setAttribute(SystemOptionConstants.SCOPE_USER_GROUP_LIST, userGroupList);
        break;
      // ここまで

      case LOG_FACADE:// 操作ログ
        List<LogBean> logList = ((BeanDataList<LogBean>) iDataList).clone();
        request.setAttribute(LogController.SCOPE_LOG_LIST, logList);
        break;

      case PROJ_NUM_FACADE:// P番一覧
        List<ProjNumBean> projList = ((BeanDataList<ProjNumBean>) iDataList).clone();
        request.setAttribute(ProjConstants.SCOPE_PROJ_LIST, projList);
        break;

      case SALES_FACADE:// 売りwin一覧
        List<SalesBean> uwDataList = ((BeanDataList<SalesBean>) iDataList).clone();
        request.setAttribute(UWConstants.SCOPE_UW_DATA_LIST, uwDataList);
        break;

      default:
        throw new IllegalArgumentException("FacedeTypeに定義されていません");
    }

    // 開発ログ追加(デバッグ用)
    SystemLogAction.addSystemLog(dbDataSource, iDataList, CodeEnum.sysLogDebug.ToJSP, request, app);
  }


  /**
   * BeanBuilderの種別ごとにDBデータ追加または更新処理を行うメソッド
   *
   * @param request
   * @param dbDataSource
   * @param beanBuilderType
   * @param facadeType
   * @param iData
   * @param formType
   * @param user
   * @param action
   * @param app
   * @param error
   * @throws Exception
   */
  protected static void addOrEditActionHelper(HttpServletRequest request, DBDataSource dbDataSource,
      BeanBuilderType beanBuilderType, FacadeType facadeType, IData iData, CodeEnum.Form formType,
      String user, String action, ServletContext app, Error error) throws Exception {

    IFacade iFacade = null;
    if (beanBuilderType != BeanBuilderType.SALES_BEAN_BUILDER) {
      iFacade = FacadeFactory.create(facadeType);
    }

    // 開発ログ(デバッグ用)
    SystemLogAction.addSystemLog(dbDataSource, iData, CodeEnum.sysLogDebug.ToLogic, request, app);

    try {
      switch (beanBuilderType) {
        case CATEGORY_BEAN_BUILDER:// 分類データ
          CategoryBean categoryBean = (CategoryBean) iData;
          // 追加処理または更新処理を実行する
          if (formType == CodeEnum.Form.add) {// formTypeがaddだった時の処理・・・追加処理実行
            iFacade.add(categoryBean, dbDataSource);
          } else if (formType == CodeEnum.Form.edit) {// formTypeがeditだった時の処理・・・更新処理の実行
            iFacade.modify_2(categoryBean, dbDataSource);
          } else {
            throw new IllegalArgumentException("CodeEnum.Formに定義されていない値が引数になっています");
          }
          break;

        case SALES_STATUS_BEAN_BUILDER:// ステータスデータ
          SalesStatusBean salesStatusBean = (SalesStatusBean) iData;
          // 追加処理または更新処理を実行する
          if (formType == CodeEnum.Form.add) {// formTypeがaddだった時の処理・・・追加処理実行
            iFacade.add(salesStatusBean, dbDataSource);
            // } else if (formType == CodeEnum.Form.edit) {// formTypeがeditだった時の処理・・・更新処理の実行
            // iFacade.modify_2(salesStatusBean, dbDataSource);
          } else {
            throw new IllegalArgumentException("CodeEnum.Formに定義されていない値が引数になっています");
          }
          break;

        case CUSTOMER_BEAN_BUILDER:// 顧客データ
          CustomerBean customerBean = (CustomerBean) iData;
          // 追加処理または更新処理を実行する
          if (formType == CodeEnum.Form.add) {// formTypeがaddだった時の処理・・・追加処理実行
            iFacade.add(customerBean, dbDataSource);
            // } else if (formType == CodeEnum.Form.edit) {// formTypeがeditだった時の処理・・・更新処理の実行
            // iFacade.modify_2(customerBean, dbDataSource);
          } else {
            throw new IllegalArgumentException("CodeEnum.Formに定義されていない値が引数になっています");
          }
          break;

        case SALES_STAFF_BEAN_BUILDER:// 営業担当データ
          SalesStaffBean salesStaffBean = (SalesStaffBean) iData;
          // 追加処理または更新処理を実行する
          if (formType == CodeEnum.Form.add) {// formTypeがaddだった時の処理・・・追加処理実行
            iFacade.add(salesStaffBean, dbDataSource);
          } else if (formType == CodeEnum.Form.edit) {// formTypeがeditだった時の処理・・・更新処理の実行
            iFacade.modify_2(salesStaffBean, dbDataSource);
          } else {
            throw new IllegalArgumentException("CodeEnum.Formに定義されていない値が引数になっています");
          }
          break;

        case USER_BEAN_BUILDER: // ユーザー情報(ユーザー一覧)
          UserBean userBean = (UserBean) iData;
          // 追加処理または更新処理を実行する
          if (formType == CodeEnum.Form.add) {// formTypeがaddだった時の処理・・・追加処理実行
            iFacade.add(userBean, dbDataSource);
          } else if (formType == CodeEnum.Form.edit) {// formTypeがeditだった時の処理・・・更新処理の実行
            iFacade.modify_2(userBean, dbDataSource);
          } else {
            throw new IllegalArgumentException("CodeEnum.Formに定義されていない値が引数になっています");
          }
          break;

        // ---追加：インターノウスここから---
        case USER_GROUP_BEAN_BUILDER: // ユーザーグループ設定
        	UserGroupBean userGroupBean = (UserGroupBean) iData;
        	// 追加処理または更新処理をじっこうする
        	if (formType == CodeEnum.Form.add) {// formTypeがaddだった時の処理・・・追加処理実行
        		iFacade.add(userGroupBean, dbDataSource);
        	} else if (formType == CodeEnum.Form.edit) {// formTypeがeditだった時の処理・・・更新処理の実行
        		iFacade.modify(userGroupBean, dbDataSource);
        	} else {
        		throw new IllegalArgumentException("CodeEnum.Formに定義されていない値が引数になっています");
        	}
        	break;
        // ---追加：インターノウスここまで---

        case SALES_BEAN_BUILDER:// 売りwin一覧
          SalesFacade salesFacade = new SalesFacade();
          SalesBean salesBean = (SalesBean) iData;

          // 開発ログ(デバッグ用)
          SystemLogAction.addSystemLog(salesBean.getAddProjNumList(), CodeEnum.sysLogDebug.ToLogic,
              dbDataSource, request, app);

          // 追加処理を実行する ※更新処理は他のメソッドを使用
          if (formType == CodeEnum.Form.add) {// formTypeがaddだった時の処理・・・追加処理実行
            salesFacade.add(salesBean, dbDataSource);
          } else {
            throw new IllegalArgumentException("システムエラー：想定外のパラメータ");
          }
          break;

        default:
          throw new IllegalArgumentException("システムエラー：想定外のパラメータ");
      }
    } catch (Exception e) {
      e.printStackTrace();
      try {// ログ追加処理(異常)
        LogAction.addLog(dbDataSource, iData, beanBuilderType, formType, user, action, true);
      } catch (Exception exception) {// 共通の例外処理
        ExceptionHandler.exceptionAction(app, request, exception, error, dbDataSource,
            "ControllerActionHelper.addOrEditActionHelper");
      }
      throw e;
    }

    try {// ログ追加処理(正常)
      LogAction.addLog(dbDataSource, iData, beanBuilderType, formType, user, action, false);
    } catch (Exception exception) {// 共通の例外処理
      ExceptionHandler.exceptionAction(app, request, exception, error, dbDataSource,
          "ControllerActionHelper.addOrEditActionHelper");
    }

  }



  /**
   * FacadeTypeごとにキャストし、リクエストスコープに保存するメソッド
   *
   * @param request
   * @param dbDataSource
   * @param facadeType
   * @param iData
   */
  public static void changeActionHelper(HttpServletRequest request, DBDataSource dbDataSource,
      FacadeType facadeType, IData iData, ServletContext app) {

    switch (facadeType) {
      case CATEGORY_FACADE:// 分類一覧
        CategoryBean categoryBean = (CategoryBean) iData.deepCopy();
        request.setAttribute(UWOptionConstants.SCOPE_CATEGORY_DATA, categoryBean);
        break;

      case CUSTOMER_FACADE:// 顧客一覧
        CustomerBean customerBean = (CustomerBean) iData.deepCopy();
        request.setAttribute(UWOptionConstants.SCOPE_CUSTOMER_DATA, customerBean);
        break;

      case SALES_STAFF_FACADE:// 営業担当一覧
        SalesStaffBean salesStaffBean = (SalesStaffBean) iData.deepCopy();
        request.setAttribute(UWOptionConstants.SCOPE_SALES_STAFF_DATA, salesStaffBean);
        break;

      case SALES_STATUS_FACADE:// ステータス一覧
        SalesStatusBean salesStatusBean = (SalesStatusBean) iData.deepCopy();
        request.setAttribute(UWOptionConstants.SCOPE_SALES_STATUS_DATA, salesStatusBean);
        break;

      case USER_FACADE:// ユーザー一覧
        UserBean userBean = (UserBean) iData.deepCopy();
        request.setAttribute(SystemOptionConstants.SCOPE_USER_DATA, userBean);
        break;

      // 追加：インターノウス
      // ここから
      case USER_GROUP_FACADE:// ユーザーグループ設定一覧
      	UserGroupBean userGroupBean = (UserGroupBean) iData.deepCopy();
      	request.setAttribute(SystemOptionConstants.SCOPE_USER_GROUP_DATA, userGroupBean);
      	break;
      // ここまで

      case PROJ_NUM_FACADE:// P番一覧
        ProjNumBean projBean = (ProjNumBean) iData.deepCopy();
        request.setAttribute(ProjConstants.SCOPE_PROJ_DATA, projBean);

        // 開発ログ(デバッグ用)
        List<String> attachFileNameList = new ArrayList<String>();
        for (AttachFileBean attachFileBean : projBean.getAttachFileList()) {
          String fileName = attachFileBean.getFileName();
          attachFileNameList.add(fileName);
        }
        SystemLogAction.addSystemLog(attachFileNameList, CodeEnum.sysLogDebug.ToJSP, dbDataSource,
            request, app);
        SystemLogAction.addSystemLog(projBean.getNotiUserList(), CodeEnum.sysLogDebug.ToJSP,
            dbDataSource, request, app);
        break;

      case ATTACH_FILE_FACADE:// 添付ファイル
        AttachFileBean attachFileBean = (AttachFileBean) iData.deepCopy();
        request.setAttribute(ProjConstants.SCOPE_ATTACHMENT, attachFileBean);
        break;

      case SALES_FACADE:// 売りwin一覧
        SalesBean salesBean = (SalesBean) iData.deepCopy();
        request.setAttribute(UWConstants.SCOPE_UW_DATA, salesBean);

        // 開発ログ(デバッグ用)
        SystemLogAction.addSystemLog(salesBean.getAddProjNumList(), CodeEnum.sysLogDebug.ToJSP,
            dbDataSource, request, app);
        break;

      default:
        throw new IllegalArgumentException("FacedeTypeに定義されていません");
    }

    // 開発ログ追加(デバッグ用)
    SystemLogAction.addSystemLog(dbDataSource, iData, CodeEnum.sysLogDebug.ToJSP, request, app);
  }

  /**
   * リクエストパラメータを取得するときの処理
   *
   * @param request
   * @param dbDataSource
   * @param sysLogDebugType
   * @return
   */
  public static Map<String, String[]> requestParameterAction(HttpServletRequest request,
      DBDataSource dbDataSource, CodeEnum.sysLogDebug sysLogDebugType, ServletContext app) {

    // リクエストパラメータを取得
    Map<String, String[]> requestParameterMap = request.getParameterMap();

    // 開発ログ追加(デバッグ用)
    SystemLogAction.addSystemLog(dbDataSource, requestParameterMap, sysLogDebugType, request, app);

    return requestParameterMap;
  }


  /**
   * actionパラメータを取得するときの処理
   *
   * @param request
   * @param dbDataSource
   * @return
   */
  public static String getActionParmeter(HttpServletRequest request, DBDataSource dbDataSource,
      ServletContext app) {
    String action = (String) request.getAttribute(ActionParamConstants.ACTION);
    // 開発ログ追加
    Object[] objectArray = {action};
    SystemLogAction.addSystemLog(dbDataSource, "action", objectArray, CodeEnum.sysLogDebug.FromJSP,
        request, app);

    return action;
  }
}
