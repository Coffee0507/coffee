package jp.co.lsij.p16590004.e_200.model;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import jp.co.lsij.p16590004.common.CodeEnum;
import jp.co.lsij.p16590004.common.DBDataSource;
import jp.co.lsij.p16590004.common.Error;
import jp.co.lsij.p16590004.common.JSPParamConstants;
import jp.co.lsij.p16590004.common.ProjConstants;
import jp.co.lsij.p16590004.common.ScopeNameConstants;
import jp.co.lsij.p16590004.common.SystemOptionConstants;
import jp.co.lsij.p16590004.common.UWConstants;
import jp.co.lsij.p16590004.common.UWOptionConstants;
import jp.co.lsij.p16590004.e_200.model.bean.MultipartFormBean;
import jp.co.lsij.p16590004.e_200.model.bean.SearchBean;
import jp.co.lsij.p16590004.e_200.model.bean.SearchConditionForDB;
import jp.co.lsij.p16590004.e_77.model.BeanBuilderFactory;
import jp.co.lsij.p16590004.e_77.model.BeanBuilderType;
import jp.co.lsij.p16590004.e_77.model.FacadeFactory;
import jp.co.lsij.p16590004.e_77.model.FacadeType;
import jp.co.lsij.p16590004.e_77.model.IBeanBuilder;
import jp.co.lsij.p16590004.e_77.model.IData;
import jp.co.lsij.p16590004.e_77.model.IDataList;
import jp.co.lsij.p16590004.e_77.model.IFacade;
import jp.co.lsij.p16590004.e_77.model.SearchCondition;
import jp.co.lsij.p16590004.e_77.model.master.beans.PageBean;
import jp.co.lsij.p16590004.e_77.model.master.beans.SortBean;
import jp.co.lsij.p16590004.e_77.model.p_num.ProjNumFacade;
import jp.co.lsij.p16590004.exception.PASMErrorType;
import jp.co.lsij.p16590004.exception.PASMException;

/**
 * コントローラが使用するメソッドをまとめたクラス
 *
 * @author m-kakuwa
 *
 */
public class ControllerAction {

  /**
   * データリストを取得し、リクエストスコープに保存するメソッド
   *
   * @param request
   * @param dbDataSource
   * @param facadeType
   * @param pageBeanBefore
   * @param sortBean
   * @param searchBean
   */
  public static void getDataList(HttpServletRequest request, DBDataSource dbDataSource,
      FacadeType facadeType, PageBean pageBeanBefore, SortBean sortBean, SearchBean searchBean,
      ServletContext app) {

    IDataList iDataList = null;
    PageBean pageBeanAfter = new PageBean();// 情報を入れない空のPageBean

    // ソートまたは検索機能が必要な画面の処理・・・DBアクセスに適したデータにbeansを加工する
    SearchConditionForDB sortAndSearch =
        SortAndSearchAction.beanToBeanArray(sortBean, searchBean, facadeType, dbDataSource);

    // ソート・検索条件情報をそれぞれ取り出す
    SortBean[] sortBeanArray = sortAndSearch.getSortBeanArray();
    SearchCondition[] searchCondition = sortAndSearch.getSearchCondition();

    // データ一覧を取得するための処理をfacadeTypeごとに実行する
    iDataList = ControllerActionHelper.getIDataList(dbDataSource, facadeType, iDataList,
        pageBeanBefore, pageBeanAfter, sortBeanArray, searchCondition, request, app);

    // 取得したデータリストに応じた型にキャストして、リクエストスコープにデータリストを保存
    ControllerActionHelper.castIDataList(request, facadeType, iDataList, dbDataSource, app);

    // ページ分割が必要な画面の処理・・・pageBeanリクエストスコープに保存
    if (facadeType == FacadeType.CUSTOMER_FACADE || facadeType == FacadeType.USER_FACADE
        || facadeType == FacadeType.LOG_FACADE || facadeType == FacadeType.USER_GROUP_FACADE) {
      request.setAttribute(ScopeNameConstants.SCOPE_PAGE_BEAN, pageBeanAfter);

      // 開発ログ追加(デバッグ用)
      SystemLogAction.addSystemLog(dbDataSource, pageBeanAfter, CodeEnum.sysLogDebug.ToJSP, request,
          app);
    }
  }


  /**
   * DBにデータを追加するメソッド
   *
   * @param request
   * @param dbDataSource
   * @param beanBuilderType
   * @param facadeType
   * @param user
   * @param action
   * @param app
   * @param error
   * @return
   * @throws Exception
   */
  public static boolean addAction(HttpServletRequest request, DBDataSource dbDataSource,
      BeanBuilderType beanBuilderType, FacadeType facadeType, String user, String action,
      ServletContext app, Error error) throws Exception {
    // リクエストパラメータを取得
    Map<String, String[]> requestParameterMap = ControllerActionHelper
        .requestParameterAction(request, dbDataSource, CodeEnum.sysLogDebug.FromJSP, app);

    // 入力値チェック
    IBeanBuilder iBeanBuilder = BeanBuilderFactory.create(beanBuilderType);
    iBeanBuilder.isValidValue(requestParameterMap);
    // 入力値が有効だった時の処理
    // Mapで取得したリクエストパラメータをbeansにセットする
    IData iData = iBeanBuilder.mapToBean(requestParameterMap, user, CodeEnum.Form.add);
    // 戻り値に応じてキャスト、DBにデータを追加する処理を実行
    ControllerActionHelper.addOrEditActionHelper(request, dbDataSource, beanBuilderType, facadeType,
        iData, CodeEnum.Form.add, user, action, app, error);
    return true;
  }


  /**
   * DBからデータを削除するメソッド
   *
   * @param request
   * @param dbDataSource
   * @param facadeType
   * @param beanBuilderType
   * @param user
   * @param action
   * @return
   * @throws PASMException
   */
  public static boolean deleteAction(HttpServletRequest request, DBDataSource dbDataSource,
      FacadeType facadeType, BeanBuilderType beanBuilderType, String user, String action,
      ServletContext app, Error error) throws PASMException {
    // リクエストパラメータ（チェックボックスのvalue=ID）の取得
    Map<String, String[]> requestParameterMap = ControllerActionHelper
        .requestParameterAction(request, dbDataSource, CodeEnum.sysLogDebug.FromJSP, app);
    String[] strIDArray = requestParameterMap.get(JSPParamConstants.CHECKBOX);

    // パラメータチェック
    boolean isValidChoice = CheckValidChoice.isValidChoice(strIDArray, CodeEnum.checkbox.multiple);
    if (!isValidChoice) {// チェックボックスの使い方に誤りがあったとき
      throw new PASMException(PASMErrorType.INVALID_PARAM, "削除するデータを1件以上選んでください");
    }

    // リクエストパラメータが有効な値だった時の処理・・・リクエストパラメータをStringからlongに変換して、削除処理実行
    IFacade iFacade = FacadeFactory.create(facadeType);
    IData iData = null;
    String errorPoint = "";// 削除処理に失敗したデータの名前を入れる
    boolean isError;
    // 追加：インターノウス
    // ここから
    String errorMessage = null;
    List<String> errorMessageList = new ArrayList<>();

    for (String strID : strIDArray) {
      isError = false;

      if (strID.equals(JSPParamConstants.CHECKBOX_ALL)) {
        continue;
      }

      // longに変換
      long lID = Long.parseLong(strID);
      // 開発ログ(デバッグ用)
      Object[] objectArray = {lID};
      SystemLogAction.addSystemLog(dbDataSource, "lID", objectArray, CodeEnum.sysLogDebug.ToLogic,
          request, app);

      try {
        // 削除対象のデータを取得（ログで使用するため）
        iData = iFacade.query(lID, dbDataSource);

      } catch (PASMException pasmE) {
        continue;
      } catch (Exception e) {
        // ビジネス例外ではないが、画面上にメッセージを表示するためPASMExceptionを使用
        throw new PASMException(PASMErrorType.INVALID, "削除に失敗しました");
      }

      try {
        // 追加：インターノウス
        // P番削除時、工数時間・仕入れ金額の値のチェックを行い、正常であれば削除する。
    	// ここから
        if (action.equals("p_del")) {
    	  ProjNumFacade projNumFacade = (ProjNumFacade) iFacade;
    	  try {
    		// P番削除に失敗した場合
    	    projNumFacade.deleteWithChecking(lID, dbDataSource);
    	  } catch (PASMException pasmE) {
    		// P番削除に失敗した理由をつめている。
    	    pasmE.printStackTrace();
    	    isError = true;
    	    // エラーが起きた箇所の情報を取得する
    	    errorPoint += LogAction.getExecContentDetail(iData, beanBuilderType, errorPoint, action,
    	    		CodeEnum.Form.delete, dbDataSource);

    	    try {// ログ追加処理(異常)
    	           LogAction.addLog(dbDataSource, iData, beanBuilderType, CodeEnum.Form.delete, user, action,
    	        		   isError);
    	    } catch (Exception exception) {// 共通の例外処理
    	    	ExceptionHandler.exceptionAction(app, request, exception, error, dbDataSource,
    	              "ControllerAction.deleteAction");
    	    }
        	// 消せなかった理由をつめる
        	errorMessage = "削除対象:"+ iData + " 原因:" + pasmE.getMessage();// エラーメッセージ
            errorMessageList.add(errorMessage);
          	// ここまで
    	  }
        } else {
          // 削除処理実行
          iFacade.delete(lID, dbDataSource);
        }
      } catch (Exception e) {
        e.printStackTrace();
        isError = true;
        // エラーが起きた箇所の情報を取得する
        errorPoint += LogAction.getExecContentDetail(iData, beanBuilderType, errorPoint, action,
            CodeEnum.Form.delete, dbDataSource);

        try {// ログ追加処理(異常)
          LogAction.addLog(dbDataSource, iData, beanBuilderType, CodeEnum.Form.delete, user, action,
              isError);
        } catch (Exception exception) {// 共通の例外処理
          ExceptionHandler.exceptionAction(app, request, exception, error, dbDataSource,
              "ControllerAction.deleteAction");
        }
      }

      if (!isError) {
        try {// ログ追加処理(正常)
          LogAction.addLog(dbDataSource, iData, beanBuilderType, CodeEnum.Form.delete, user, action,
              isError);
        } catch (Exception exception) {// 共通の例外処理
          ExceptionHandler.exceptionAction(app, request, exception, error, dbDataSource,
              "ControllerAction.deleteAction");
        }
      }
    }
    // 削除処理に失敗したデータがあった場合の処理
    if (!errorPoint.isEmpty()) {
      // ビジネス例外ではないが、画面上にメッセージを表示するためPASMExceptionを使用
      throw new PASMException(PASMErrorType.INVALID, errorPoint + "の削除に失敗しました");
    }
    // 全件削除成功の時の処理
    return true;
  }


  /**
   * データ一覧画面からデータ編集画面に遷移するときの処理
   *
   * @param request
   * @param dbDataSource
   * @param facadeType
   * @return
   * @throws PASMException
   */
  public static boolean changeAction(HttpServletRequest request, DBDataSource dbDataSource,
      FacadeType facadeType, ServletContext app) throws PASMException {
    // リクエストパラメータ（チェックボックスのvalue=ID）の取得
    Map<String, String[]> requestParameterMap = ControllerActionHelper
        .requestParameterAction(request, dbDataSource, CodeEnum.sysLogDebug.FromJSP, app);
    String[] strIDArray = requestParameterMap.get(JSPParamConstants.CHECKBOX);

    // パラメータチェック
    boolean isValidChoice = CheckValidChoice.isValidChoice(strIDArray, CodeEnum.checkbox.single);
    if (!isValidChoice) {// チェックボックスの使い方に誤りがあったとき
      throw new PASMException(PASMErrorType.INVALID_PARAM, "対象のデータを1件選んでください");
    }
    // longに変換
    long lID = Long.parseLong(strIDArray[0]);

    // 開発ログ(デバッグ用)
    Object[] objectArray = {lID};
    SystemLogAction.addSystemLog(dbDataSource, "lID", objectArray, CodeEnum.sysLogDebug.ToLogic,
        request, app);

    // lIDと一致するデータをDBから取得
    IFacade iFacade = FacadeFactory.create(facadeType);
    IData iData = iFacade.query(lID, dbDataSource);

    // 戻り値に合わせてキャストして、リクエストスコープに保存
    ControllerActionHelper.changeActionHelper(request, dbDataSource, facadeType, iData, app);
    return true;
  }


  /**
   * DBのデータを更新するメソッド
   *
   * @param request
   * @param dbDataSource
   * @param beanBuilderType
   * @param facadeType
   * @param user
   * @param action
   * @param app
   * @param error
   * @return
   * @throws Exception
   */
  public static boolean editAction(HttpServletRequest request, DBDataSource dbDataSource,
      BeanBuilderType beanBuilderType, FacadeType facadeType, String user, String action,
      ServletContext app, Error error) throws Exception {
    // リクエストパラメータを取得
    Map<String, String[]> requestParameterMap = ControllerActionHelper
        .requestParameterAction(request, dbDataSource, CodeEnum.sysLogDebug.FromJSP, app);

    // 入力値チェック
    IBeanBuilder iBeanBuilder = BeanBuilderFactory.create(beanBuilderType);
    iBeanBuilder.isValidValue(requestParameterMap);
    // 入力値が有効だった時の処理
    // Mapで取得したリクエストパラメータをbeansにセットする
    IData iData = iBeanBuilder.mapToBean(requestParameterMap, user, CodeEnum.Form.edit);
    // 戻り値に応じてキャスト、DBのデータを更新する処理を実行
    ControllerActionHelper.addOrEditActionHelper(request, dbDataSource, beanBuilderType, facadeType,
        iData, CodeEnum.Form.edit, user, action, app, error);
    return true;
  }


  /**
   * 特定のIDからIDataを取得するメソッド
   *
   * @param request
   * @param dbDataSource
   * @param facadeType
   * @return
   * @throws PASMException
   */
  public static IData getIDataWithTheID(HttpServletRequest request, DBDataSource dbDataSource,
      FacadeType facadeType, ServletContext app) throws PASMException {
    // リクエストパラメータを取得(ID)
    String strID = null;
    Map<String, String[]> requestParameterMap = ControllerActionHelper
        .requestParameterAction(request, dbDataSource, CodeEnum.sysLogDebug.FromJSP, app);
    if (facadeType == FacadeType.PROJ_NUM_FACADE) {// プロジェクト情報を取得するとき
      strID = requestParameterMap.get(ProjConstants.PROJ_THE_ID)[0];
    } else if (facadeType == FacadeType.ATTACH_FILE_FACADE) {// 添付ファイルデータを取得するとき
      strID = requestParameterMap.get(ProjConstants.ATTACHMENT_ID)[0];
    }

    // longに変換
    if (strID == null || strID.isEmpty()) {
      throw new IllegalStateException("ControllerAction.getIDataWithTheID:不正なパラメータ");
    }
    long lID = Long.parseLong(strID);

    // 開発ログ(デバッグ用)
    Object[] objectArray = {lID};
    SystemLogAction.addSystemLog(dbDataSource, "lID", objectArray, CodeEnum.sysLogDebug.ToLogic,
        request, app);

    // IDに対応するデータを取得する
    IFacade iFacade = FacadeFactory.create(facadeType);
    IData iData = iFacade.query(lID, dbDataSource);

    return iData;
  }

  /**
   * フォーム画面の識別情報をリクエストスコープに保存するメソッド
   *
   * @param request
   * @param action
   * @param dbDataSource
   */
  public static void setFormIDToScope(HttpServletRequest request, String action,
      DBDataSource dbDataSource, ServletContext app) {

    CodeEnum.Form formType = null;

    if (action.equals(SystemOptionConstants.ACTION_USER_NEW)
        || action.equals(SystemOptionConstants.ACTION_USER_ADD)
        // 追加：インターノウス
        // ここから
        || action.equals(SystemOptionConstants.ACTION_USER_GROUP_NEW)
        || action.equals(SystemOptionConstants.ACTION_USER_GROUP_ADD)
        // ここまで
        || action.equals(UWOptionConstants.ACTION_CAT_NEW)
        || action.equals(UWOptionConstants.ACTION_CAT_ADD)
        || action.equals(UWOptionConstants.ACTION_SALES_STAFF_NEW)
        || action.equals(UWOptionConstants.ACTION_SALES_STAFF_ADD)
        || action.equals(ProjConstants.ACTION_PROJ_NEW)
        || action.equals(ProjConstants.ACTION_PROJ_ADD) || action.equals(UWConstants.ACTION_UW_NEW)
        || action.equals(UWConstants.ACTION_UW_ADD)) {
      formType = CodeEnum.Form.add;

    } else if (action.equals(SystemOptionConstants.ACTION_USER_CHANGE)
    	// 追加：インターノウス
    	// ここから
    	|| action.equals(SystemOptionConstants.ACTION_USER_GROUP_CHANGE)
    	// ここまで
        || action.equals(UWOptionConstants.ACTION_CAT_CHANGE)
        || action.equals(UWOptionConstants.ACTION_CAT_EDIT)
        || action.equals(SystemOptionConstants.ACTION_USER_EDIT)
        // 追加：インターノウス
        // ここから
        || action.equals(SystemOptionConstants.ACTION_USER_GROUP_EDIT)
        // ここまで
        || action.equals(UWOptionConstants.ACTION_SALES_STAFF_CHANGE)
        || action.equals(UWOptionConstants.ACTION_SALES_STAFF_EDIT)
        || action.equals(ProjConstants.ACTION_PROJ_CHANGE)
        || action.equals(ProjConstants.ACTION_PROJ_EDIT)
        || action.equals(ProjConstants.ACTION_PROJ_DETAIL_CHANGE)
        || action.equals(UWConstants.ACTION_UW_EDIT)
        || action.equals(UWConstants.ACTION_UW_CHANGE)) {
      formType = CodeEnum.Form.edit;

    } else if (action.equals(ProjConstants.ACTION_PROJ_COPY)) {
      formType = CodeEnum.Form.copy;
    }

    // フォームの識別情報=addをリクエストスコープに保存
    request.setAttribute(ScopeNameConstants.SCOPE_FORM_ID, formType);

    // 開発ログ追加(デバッグ用)
    SystemLogAction.addSystemLog(dbDataSource, formType, CodeEnum.sysLogDebug.ToJSP, request, app);
  }

  /**
   * multipartのフォームから送られたパラメータをmapにセットするメソッド
   *
   * @param request
   * @return
   * @throws FileUploadException
   * @throws UnsupportedEncodingException
   */
  public static MultipartFormBean getMultiPartFormData(HttpServletRequest request)
      throws FileUploadException, UnsupportedEncodingException {
    // リクエストパラメータを取得する
    // ServletFileUploadオブジェクトを生成
    DiskFileItemFactory factory = new DiskFileItemFactory();
    ServletFileUpload upload = new ServletFileUpload(factory);

    // データを受信する際のエンコード方式の設定
    upload.setHeaderEncoding("UTF-8");

    // FileItemオブジェクトのリストを取得
    List<FileItem> fileItemList = upload.parseRequest(request);

    // FileItemオブジェクトを順に処理する
    // フォームのパラメータをセットするmapオブジェクト
    Map<String, String[]> formFieldMap = new HashMap<String, String[]>();
    // ファイルデータをセットするList
    List<FileItem> fileDataList = new ArrayList<FileItem>();
    // 通知ユーザーの情報(社員番号)を一時的に保持するList
    List<String> noticeList = new ArrayList<String>();
    // 削除対象の添付ファイルIDを一時的に保持するList
    List<String> attachmentIDList = new ArrayList<String>();

    Iterator<FileItem> ite = fileItemList.iterator();
    while (ite.hasNext()) {
      FileItem fileItem = (FileItem) ite.next();

      if (fileItem.isFormField()) {// ファイルデータ以外の処理
        // 取得したフォームのnameとvalueをrequestParameterMapにセットする
        // nameの取得
        String name = fileItem.getFieldName();
        String value = fileItem.getString("UTF-8");

        if (name.equals(ProjConstants.PROJ_NOTICE)) {
          noticeList.add(value);
        } else if (name.equals(ProjConstants.PROJ_DELETE_ATTACHMENT)) {// 削除対象の添付ファイル(編集時のみ)
          attachmentIDList.add(value);

        } else {
          // valueを配列に変換
          String[] valueArray = new String[] {value};
          // requestParameterMapにセットする
          formFieldMap.put(name, valueArray);
        }

      } else {// ファイルデータの処理
        fileDataList.add(fileItem);
      }
    }

    if (noticeList.size() != 0) {
      // 通知ユーザーのList(noticeList)を配列に変換
      String[] noticeArray = (String[]) noticeList.toArray(new String[0]);
      // requestParameterMapにセットする
      formFieldMap.put(ProjConstants.PROJ_NOTICE, noticeArray);
    }

    if (attachmentIDList.size() != 0) {// 削除対象の添付ファイルID 編集時のみ
      String[] attachmentIDArray = (String[]) attachmentIDList.toArray(new String[0]);
      formFieldMap.put(ProjConstants.PROJ_DELETE_ATTACHMENT, attachmentIDArray);
    }

    MultipartFormBean multipartFormBean = new MultipartFormBean(formFieldMap, fileDataList);

    return multipartFormBean;
  }


  /**
   * MultipartFormBeanからformFieldMap（ファイルデータ以外のパラメータ）を取得し、リクエストスコープに保存するメソッド
   *
   * @param request
   * @param action
   * @param dbDataSource
   * @throws FileUploadException
   * @throws UnsupportedEncodingException
   */
  public static void setFormFieldMapToScope(HttpServletRequest request, String action,
      DBDataSource dbDataSource, ServletContext app)
      throws FileUploadException, UnsupportedEncodingException {

    // formFieldMapの取得
    if (request.getAttribute(ScopeNameConstants.SCOPE_MULTIPART_DATA) == null) {
      throw new IllegalStateException("システムエラー：パラメータが取得できませんでした");

    }
    MultipartFormBean multiPartFormBean =
        (MultipartFormBean) request.getAttribute(ScopeNameConstants.SCOPE_MULTIPART_DATA);
    // フォームデータ
    Map<String, String[]> formFieldData = multiPartFormBean.getFormFieldMap();


    // リクエストスコープに保存
    String scopeName = null;
    if (action.equals(ProjConstants.ACTION_PROJ_ADD)
        || action.equals(ProjConstants.ACTION_PROJ_EDIT)) {// P番関連の入力値
      // スコープ名設定
      scopeName = ProjConstants.SCOPE_PROJ_INPUT_VALUE;

    }
    request.setAttribute(scopeName, formFieldData);

    // 開発ログ追加(デバッグ用)
    SystemLogAction.addSystemLog(dbDataSource, formFieldData, CodeEnum.sysLogDebug.ToJSP, request,
        app);
  }
<<<<<<< HEAD


}
=======
}
>>>>>>> refs/remotes/origin/dev
