package jp.co.lsij.p16590004.e_200.model;

import java.math.BigInteger;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import checkInputValue.CheckInputValueLogic;
import jp.co.lsij.p16590004.common.ProjConstants;
import jp.co.lsij.p16590004.common.PurchaseConstants;
import jp.co.lsij.p16590004.dao.SQLHelper;
import jp.co.lsij.p16590004.e_200.model.sales.SalesBeanBuilder;
import jp.co.lsij.p16590004.e_77.util.DateHelper;
import jp.co.lsij.p16590004.exception.PASMErrorType;
import jp.co.lsij.p16590004.exception.PASMException;


/**
 * プロジェクトに関する入力値の操作を行うクラス
 *
 * @author m-kakuwa
 *
 */
public class ProjInputValue {
  /**
   * P番の入力値チェック※空欄チェックは行わない
   *
   * @param inputValue
   * @return
   * @throws PASMException
   */
  public static boolean checkProjID(String inputValue) throws PASMException {

    // 判定パターン生成 ※空文字はtrue
    Pattern pattern = Pattern.compile("^[0-9/-]*$");
    Matcher matcher = pattern.matcher(inputValue);

    if (!matcher.find()) {
      throw new PASMException(PASMErrorType.INVALID_PARAM, "P番は半角数字とハイフン以外入力できません");
    }
    return true;
  }

  /**
   * 受注月・入金月・売上月の入力値チェック
   *
   * @param inputValue
   * @param name
   * @return
   * @throws PASMException
   */
  public static boolean checkMonth(String inputValue, String name) throws PASMException {

    if (!inputValue.isEmpty()) {
      if (inputValue.length() != DateAction.MONTH_STRING_FORMAT.length()) {
        if (name.equals(ProjConstants.PROJ_DATE_ORDER)
            || name.equals(SalesBeanBuilder.MAP_KEY_DATE_ORDER)) {
          throw new PASMException(PASMErrorType.INVALID_PARAM, "受注月の入力形式に誤りがあります");
        } else if (name.equals(ProjConstants.PROJ_DATE_SALES)
            || name.equals(SalesBeanBuilder.MAP_KEY_DATE_SALES)) {
          throw new PASMException(PASMErrorType.INVALID_PARAM, "売上月の入力形式に誤りがあります");
        } else if (name.equals(ProjConstants.PROJ_DATE_PAYMENT)
            || name.equals(SalesBeanBuilder.MAP_KEY_DATE_PAYMENT)) {
          throw new PASMException(PASMErrorType.INVALID_PARAM, "入金月の入力形式に誤りがあります");
        }
      }
      // 日付部分を足す
      inputValue += ProjConstants.PROJ_PLUS_DATE;
      // 値チェック
      boolean isRealDate = DateHelper.isValidDateStringWithHyphen(inputValue);
      if (!isRealDate) {
        if (name.equals(ProjConstants.PROJ_DATE_ORDER)
            || name.equals(SalesBeanBuilder.MAP_KEY_DATE_ORDER)) {
          throw new PASMException(PASMErrorType.INVALID_PARAM, "受注月の入力に誤りがあります");
        } else if (name.equals(ProjConstants.PROJ_DATE_SALES)
            || name.equals(SalesBeanBuilder.MAP_KEY_DATE_SALES)) {
          throw new PASMException(PASMErrorType.INVALID_PARAM, "売上月の入力に誤りがあります");
        } else if (name.equals(ProjConstants.PROJ_DATE_PAYMENT)
            || name.equals(SalesBeanBuilder.MAP_KEY_DATE_PAYMENT)) {
          throw new PASMException(PASMErrorType.INVALID_PARAM, "入金月の入力に誤りがあります");
        }
      }
    }
    return true;
  }

  /**
   * 受注金額、開発予算など金額関係(long型)の入力値チェック
   *
   * @param inputValue
   * @param name
   * @return
   * @throws PASMException
   */
  public static boolean checkMoney(String inputValue, String name) throws PASMException {

    if (inputValue.isEmpty()) {// 空欄の時は0で置き換える
      inputValue = "0";
    }
    // 半角数字以外が入力されていないかチェックする
    boolean isNumber = CheckInputValueLogic.isNumber(inputValue);
    if (!isNumber) {
      if (name.equals(ProjConstants.PROJ_VALUE_ORDER)
          || name.equals(SalesBeanBuilder.MAP_KEY_VALUE_ORDER)) {
        throw new PASMException(PASMErrorType.INVALID_PARAM, "受注金額は半角数字で入力してください");
      } else if (name.equals(ProjConstants.PROJ_DEV_BUDGET)) {
        throw new PASMException(PASMErrorType.INVALID_PARAM, "開発予算は半角数字で入力してください");
      // ---追加：インターノウス---
      // ---ここから---
      } else if (name.equals(PurchaseConstants.PURCHASE_AMOUNT)) {
      	throw new PASMException(PASMErrorType.INVALID_PARAM, "総仕入れ額は半角数字で入力してください");
      }
    }
    if (name.equals(PurchaseConstants.PURCHASE_AMOUNT)) {
    	boolean isInTheRangeOfLong = ValueRangeCheck.isInTheRangeOfLong(new BigInteger(inputValue));
    	if (!isInTheRangeOfLong) {
    		throw new PASMException(PASMErrorType.INVALID_PARAM,
            "総仕入れ額は-9223372036854775808〜9223372036854775807の範囲で入力してください");
    	}
    } else {
      // ---追加：インターノウス---
      // ---ここまで---
	    // パラメータが0からLongの最大値の範囲内かチェック
	    boolean isZeroToLongMaxValue = ValueRangeCheck.isZeroToLongMaxValue(new BigInteger(inputValue));
	    if (!isZeroToLongMaxValue) {
	      if (name.equals(ProjConstants.PROJ_VALUE_ORDER)
	          || name.equals(SalesBeanBuilder.MAP_KEY_VALUE_ORDER)) {
	        throw new PASMException(PASMErrorType.INVALID_PARAM,
	            "受注金額は0〜9223372036854775807の範囲で入力してください");
	      } else if (name.equals(ProjConstants.PROJ_DEV_BUDGET)) {
	        throw new PASMException(PASMErrorType.INVALID_PARAM,
	            "開発予算は0〜9223372036854775807の範囲で入力してください");
	      }
	    }
    }
    return true;
  }


  /**
   * Stringの日付をjava.sql.Dateに変換するメソッド
   *
   * @param inputValue
   * @return
   */
  public static java.sql.Date stringToSQLDate(String inputValue) {

    // String型の日付をDate型に変換する
    Date date;
    try {
      date = DateHelper.stringWithHyphenToDate(inputValue);
    } catch (Exception e) {
      throw e;
    }
    // sql.Date型に変換する
    java.sql.Date sqlDate = SQLHelper.UtilDateToSqlDate(date);

    return sqlDate;
  }


  // 追加：三橋
  public static boolean checkInt(String price, String name) throws PASMException  {

	// 半角数字以外が入力されていないかチェックする
	boolean isNumber = CheckInputValueLogic.isNumber(price);
	if (!isNumber) {
	  if (name.equals(ProjConstants.PROJ_UNIT_PRICE)) {
		  throw new PASMException(PASMErrorType.INVALID_PARAM, "工数単価は半角数字で入力してください");
	  }
	}
	boolean isZeroToIntMaxValue = ValueRangeCheck.isZeroToIntMaxValue(new BigInteger(price));

	if (!isZeroToIntMaxValue) {
	  if (name.equals(ProjConstants.PROJ_UNIT_PRICE)) {
	    throw new PASMException(PASMErrorType.INVALID_PARAM,
	      "工数単価は0〜2147483647の範囲で入力してください");
	  }
	}
	return true;
  }
}
