/**
 *
 */
package jp.co.lsij.p16590004.e_77.util;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.servlet.http.Part;

import org.apache.commons.fileupload.FileItem;

import com.opencsv.CSVReader;

import jp.co.lsij.p16590004.e_77.model.p_num.beans.ProjNumBean;
import jp.co.lsij.p16590004.e_77.model.sales.beans.SalesBean;
import jp.co.lsij.p16590004.exception.ExceptionType;
import jp.co.lsij.p16590004.exception.SubstituteRuntimeException;

/**
 * ProjNumBean ヘルパクラス
 *
 * ・スレッドセーフでない
 *
 * @version 1.0.0
 * @author dai
 *
 */
public final class ProjNumBeanHelper {
  /** CSV文字コード */
  public static final String CSV_DEFAULT_CHARA_SET = "Shift_JIS";

  /**
   * コンストラクタ
   */
  private ProjNumBeanHelper() {
    // TODO 自動生成されたコンストラクター・スタブ
  }

  /**
   * InputStreamオブジェクトからCSV読込みファイルオブジェクトを生成
   *
   * @param inputStream InputStreamオブジェクト
   * @param strCharaSet CSV ファイルの文字コード
   * @param hasHeader ヘッダ行（説明行）あり
   * @return CSV読込みファイルオブジェクト
   */
  private static CSVReader createCSVReader(InputStream inputStream, String strCharaSet,
      boolean hasHeader) {
    assert (null != inputStream);
    assert ((null != strCharaSet) && (0 < strCharaSet.length()));

    if (null == inputStream) {
      throw new IllegalArgumentException();
    }
    if ((null == strCharaSet) || (0 >= strCharaSet.length())) {
      throw new IllegalArgumentException();
    }
    InputStreamReader ireader = null;
    CSVReader reader = null;

    int nOffset = 0;
    if (false != hasHeader) {
      nOffset = 1;
    }
    try {
      ireader = new InputStreamReader(inputStream, strCharaSet);// UnsupportedEncodingException
      reader = new CSVReader(ireader, ',', '"', nOffset);
      // reader = new CSVReader(ireader, ',', '"', 0);
    } catch (UnsupportedEncodingException err) {// java.lang.Exception
      assert (false);
      try {
        if (null != ireader) {
          ireader.close();
        }
      } catch (Exception err_2) {
        assert (false);
      }
      // UnsupportedEncodingException がないので、IO とする
      throw new SubstituteRuntimeException(ExceptionType.UNSUPPORTED_ENCODING, err.getMessage(),
          err.getCause());
    } catch (Exception err) {
      assert (false);
      try {
        if (null != ireader) {
          ireader.close();
        }
      } catch (Exception err_2) {
        assert (false);
      }
      throw err;
    }

    return reader;
  }

  /**
   * CSV読込みファイルオブジェクトからString[]リストオブジェクトを生成
   *
   * @param csvReader CSV読込みファイルオブジェクト
   * @return String[]リストオブジェクト
   */
  private static List<String[]> createCSVList(CSVReader csvReader) {
    assert (null != csvReader);

    if (null == csvReader) {
      throw new IllegalArgumentException();
    }
    List<String[]> list = new ArrayList<String[]>();
    try {
      String[] nextLine = null;

      while (null != (nextLine = csvReader.readNext())) {
        String[] line = Arrays.copyOf(nextLine, nextLine.length);// NegativeArraySizeException,
                                                                 // NullPointerException
        list.add(line);// UnsupportedOperationException, ClassCastException, NullPointerException,
                       // IllegalArgumentException
      }
    } catch (IOException err) {
      assert (false);
      try {
        list.clear();
      } catch (Exception err_2) {
        assert (false);
      }
      list = null;
      throw new SubstituteRuntimeException(ExceptionType.IO, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      try {
        list.clear();
      } catch (Exception err_2) {
        assert (false);
      }
      list = null;
      throw err;
    }

    return list;
  }

  /**
   * マルチパートのファイルｱｲﾃﾑオブジェクトからString[]リストオブジェクトを生成
   *
   * @param fileItem マルチパートのファイルｱｲﾃﾑオブジェクト
   * @param strCharaSet CSV ファイルの文字コード
   * @param hasHeader ヘッダ行（説明行）あり
   * @return String[]リストオブジェクト
   */
  // ※空CSVも正常系（呼び出し側でチェック必須）
  // ※CSV フォーマット異常（ダブルクォートが片方ないなど）も正常系なので注意（呼び出し側でチェック必須）
  // ー＞List<String[]>：：size() チェック
  // String[]::length チェック（カラム数）
  // 各カラムの内容チェック
  public static List<String[]> createCSVList(FileItem fileItem, String strCharaSet,
      boolean hasHeader) {
    assert ((null != fileItem) && (false == fileItem.isFormField()));

    if ((null == fileItem) || (false != fileItem.isFormField())) {
      throw new IllegalArgumentException();
    }
    InputStream inputStream = null;

    try {
      inputStream = fileItem.getInputStream();
    } catch (IOException err) {
      assert (false);
      throw new SubstituteRuntimeException(ExceptionType.IO, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      throw err;
    }
    CSVReader csvReader = ProjNumBeanHelper.createCSVReader(inputStream, strCharaSet, hasHeader);

    List<String[]> list = null;

    try {
      list = ProjNumBeanHelper.createCSVList(csvReader);
    } catch (Exception err) {
      assert (false);
      list = null;
      throw err;
    } finally {
      try {
        csvReader.close();
      } catch (IOException err_2) {
        assert (false);
      }
      csvReader = null;
    }

    return list;
  }

  /**
   * マルチパートのファイルｱｲﾃﾑオブジェクトからString[]リストオブジェクトを生成
   *
   * @param fileItem マルチパートのファイルｱｲﾃﾑオブジェクト
   * @param strCharaSet CSV ファイルの文字コード
   * @return String[]リストオブジェクト
   */
  // ※空CSVも正常系（呼び出し側でチェック必須）
  // ※CSV フォーマット異常（ダブルクォートが片方ないなど）も正常系なので注意（呼び出し側でチェック必須）
  // ー＞List<String[]>：：size() チェック
  // String[]::length チェック（カラム数）
  // 各カラムの内容チェック
  public static List<String[]> createCSVList(FileItem fileItem, String strCharaSet) {
    return createCSVList(fileItem, strCharaSet, true);
  }

  /** 削除予定 */
  // ---追加：インターノウスここから---
  /**
   * 仕入れインポートファイルｱｲﾃﾑオブジェクトからString[]リストオブジェクトを生成
   *
   * @param fileItem 仕入れインポートファイルｱｲﾃﾑオブジェクト
   * @param strCharaSet CSV ファイルの文字コード
   * @return String[]リストオブジェクト
   */
  /**
  // ※空CSVも正常系（呼び出し側でチェック必須）
  // ※CSV フォーマット異常（ダブルクォートが片方ないなど）も正常系なので注意（呼び出し側でチェック必須）
  // ー＞List<String[]>：：size() チェック
  // String[]::length チェック（カラム数）
  // 各カラムの内容チェック
  public static List<String[]> createPurchaseCSVList(FileItem fileItem, String strCharaSet) {
    return createCSVList(fileItem, strCharaSet, false);
  }
  // ---追加：インターノウスここまで--- */

  /**
   * マルチパートのファイルｱｲﾃﾑオブジェクトからString[]リストオブジェクトを生成
   *
   * @param fileItem マルチパートのファイルｱｲﾃﾑオブジェクト
   * @return String[]リストオブジェクト
   */
  // ※空CSVも正常系（呼び出し側でチェック必須）
  // ※CSV フォーマット異常（ダブルクォートが片方ないなど）も正常系なので注意（呼び出し側でチェック必須）
  // ー＞List<String[]>：：size() チェック
  // String[]::length チェック（カラム数）
  // 各カラムの内容チェック
  public static List<String[]> createCSVList(FileItem fileItem) {
    return ProjNumBeanHelper.createCSVList(fileItem, ProjNumBeanHelper.CSV_DEFAULT_CHARA_SET);
  }

  // ---追加：インターノウスここから---
  /**
   * 仕入れインポートファイルｱｲﾃﾑオブジェクトからString[]リストオブジェクトを生成
   *
   * @param fileItem 仕入れインポートファイルｱｲﾃﾑオブジェクト
   * @return String[]リストオブジェクト
   */
  // ※空CSVも正常系（呼び出し側でチェック必須）
  // ※CSV フォーマット異常（ダブルクォートが片方ないなど）も正常系なので注意（呼び出し側でチェック必須）
  // ー＞List<String[]>：：size() チェック
  // String[]::length チェック（カラム数）
  // 各カラムの内容チェック
 /* public static List<String[]> createPurchaseCSVList(FileItem fileItem) {
    return ProjNumBeanHelper.createPurchaseCSVList(fileItem, ProjNumBeanHelper.CSV_DEFAULT_CHARA_SET);
  }*/
  // ---追加：インターノウスここまで---

  /**
   * パートのファイルｱｲﾃﾑオブジェクトからString[]リストオブジェクトを生成
   *
   * @param part パートオブジェクト
   * @param strCharaSet CSV ファイルの文字コード
   * @param hasHeader ヘッダ行（説明行）あり
   * @return String[]リストオブジェクト
   */
  // ※空CSVも正常系（呼び出し側でチェック必須）
  // ※CSV フォーマット異常（ダブルクォートが片方ないなど）も正常系なので注意（呼び出し側でチェック必須）
  // ー＞List<String[]>：：size() チェック
  // String[]::length チェック（カラム数）
  // 各カラムの内容チェック
  public static List<String[]> createCSVList(Part part, String strCharaSet, boolean hasHeader) {
    assert (null != part);

    if (null == part) {
      throw new IllegalArgumentException();
    }
    InputStream inputStream = null;

    try {
      inputStream = part.getInputStream();
    } catch (IOException err) {
      assert (false);
      throw new SubstituteRuntimeException(ExceptionType.IO, err.getMessage(), err.getCause());
    } catch (Exception err) {
      assert (false);
      throw err;
    }
    CSVReader csvReader = ProjNumBeanHelper.createCSVReader(inputStream, strCharaSet, hasHeader);

    List<String[]> list = null;

    try {
      list = ProjNumBeanHelper.createCSVList(csvReader);
    } catch (Exception err) {
      assert (false);
      list = null;
      throw err;
    } finally {
      try {
        csvReader.close();
      } catch (IOException err_2) {
        assert (false);
      }
      csvReader = null;
    }

    return list;
  }

  /**
   * パートのファイルｱｲﾃﾑオブジェクトからString[]リストオブジェクトを生成
   *
   * @param part パートオブジェクト
   * @param strCharaSet CSV ファイルの文字コード
   * @return String[]リストオブジェクト
   */
  // ※空CSVも正常系（呼び出し側でチェック必須）
  // ※CSV フォーマット異常（ダブルクォートが片方ないなど）も正常系なので注意（呼び出し側でチェック必須）
  // ー＞List<String[]>：：size() チェック
  // String[]::length チェック（カラム数）
  // 各カラムの内容チェック
  public static List<String[]> createCSVList(Part part, String strCharaSet) {
    return ProjNumBeanHelper.createCSVList(part, strCharaSet, true);
  }

  /**
   * パートのファイルｱｲﾃﾑオブジェクトからString[]リストオブジェクトを生成
   *
   * @param part パートオブジェクト
   * @return String[]リストオブジェクト
   */
  // ※空CSVも正常系（呼び出し側でチェック必須）
  // ※CSV フォーマット異常（ダブルクォートが片方ないなど）も正常系なので注意（呼び出し側でチェック必須）
  // ー＞List<String[]>：：size() チェック
  // String[]::length チェック（カラム数）
  // 各カラムの内容チェック
  public static List<String[]> createCSVList(Part part) {
    return ProjNumBeanHelper.createCSVList(part, ProjNumBeanHelper.CSV_DEFAULT_CHARA_SET);
  }

  /**
   * SalesBean から ProjNumBean を生成
   *
   * @param salesBean 販売オブジェクト
   * @return P番オブジェクト
   */
  public static ProjNumBean salesBeanToProjNumBean(SalesBean salesBean) {
    assert ((null != salesBean) && (false != salesBean.isValidRequiredColumn(false)));// update時用

    if ((null == salesBean) || (false == salesBean.isValidRequiredColumn(false))) {
      throw new IllegalArgumentException();
    }
    ProjNumBean projNumBean = new ProjNumBean();

    if (null != salesBean.getProjNum()) {
      projNumBean.setProjNum(new String(salesBean.getProjNum()));
    }
    if (null != salesBean.getCatName()) {
      projNumBean.setCatName(new String(salesBean.getCatName()));
    }
    if (null != salesBean.getSalesStaffName()) {
      projNumBean.setSalesStaffName(new String(salesBean.getSalesStaffName()));
    }
    if (null != salesBean.getSalesStatusName()) {
      projNumBean.setSalesStatusName(new String(salesBean.getSalesStatusName()));
    }
    if (null != salesBean.getProjName()) {
      projNumBean.setProjName(new String(salesBean.getProjName()));
    }
    if (null != salesBean.getCustomerName()) {
      projNumBean.setCustomerName(new String(salesBean.getCustomerName()));
    }
    if (null != salesBean.getEndUserName()) {
      projNumBean.setEndUserName(new String(salesBean.getEndUserName()));
    }
    projNumBean.setValueOfOrder(salesBean.getValueOfOrder());
    if (null != salesBean.getDateOfOrders()) {
      projNumBean.setDateOfOrders(salesBean.getDateOfOrders());
    }
    if (null != salesBean.getDateOfSales()) {
      projNumBean.setDateOfSales(salesBean.getDateOfSales());
    }
    if (null != salesBean.getDayOfPayment()) {
      projNumBean.setDayOfPayment(salesBean.getDayOfPayment());
    }
    if (null != salesBean.getRemarks()) {
      projNumBean.setRemarks(new String(salesBean.getRemarks()));
    }
    if (null != salesBean.getCreatedBy()) {
      projNumBean.setCreatedBy(new String(salesBean.getCreatedBy()));
    }
    if (null != salesBean.getChangedBy()) {
      projNumBean.setChangedBy(new String(salesBean.getChangedBy()));
    }
    // if (false == projNumBean.isValidRequiredColumn(false)) {
    // assert (false);
    // throw new IllegalStateException();
    // }

    return projNumBean;
  }

}
